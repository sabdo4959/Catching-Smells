2025-11-01 13:52:34,675 - __main__ - INFO - 2단계 자동 복구 시작: 5개 파일
2025-11-01 13:52:34,675 - __main__ - INFO - 입력 디렉토리: data_original
2025-11-01 13:52:34,675 - __main__ - INFO - 출력 디렉토리: data_repair_two_phase
2025-11-01 13:52:34,675 - __main__ - INFO - 프롬프트 모드: Simple (2단계 복구)
2025-11-01 13:52:34,675 - __main__ - INFO - [1/5] 처리 중: 19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32
2025-11-01 13:52:34,675 - __main__ - INFO - 입력 파일 경로: data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32
2025-11-01 13:52:34,675 - __main__ - INFO - 출력 파일 경로: data_repair_two_phase/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_two_phase_repaired.yml
2025-11-01 13:52:34,675 - __main__ - INFO - === 파일 1/5 2단계 복구 시작 ===
2025-11-01 13:52:34,675 - main - INFO - === 2단계 모드 시작 ===
2025-11-01 13:52:34,675 - main - INFO - 1단계: 입력 파일 읽기
2025-11-01 13:52:34,675 - utils.yaml_parser - DEBUG - YAML 파일 읽기 완료: data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32
2025-11-01 13:52:34,675 - main - INFO - 파일 크기: 2692 문자
2025-11-01 13:52:34,675 - main - INFO - === Phase 1: 구문 오류 수정 ===
2025-11-01 13:52:34,675 - main - INFO - 2단계: actionlint 구문 검사
2025-11-01 13:52:34,675 - utils.process_runner - INFO - actionlint 바이너리 발견: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac
2025-11-01 13:52:34,675 - utils.process_runner - INFO - 명령어 실행: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac -format '{{json .}}' data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32
2025-11-01 13:52:34,697 - utils.process_runner - WARNING - 명령어 실행 실패 (코드: 1, 시간: 0.02초)
2025-11-01 13:52:34,698 - utils.process_runner - INFO - actionlint 실행 완료: 오류 발견됨 (코드: 1)
2025-11-01 13:52:34,698 - main - INFO - actionlint에서 1개 오류 발견 (syntax-check 및 expression만)
2025-11-01 13:52:34,698 - main - INFO - actionlint 오류 1개 발견
2025-11-01 13:52:34,698 - main - INFO -   오류 1: could not parse as YAML: yaml: line 35: did not find expected key
2025-11-01 13:52:34,698 - main - INFO - 3단계: 구문 오류 수정 프롬프트 생성
2025-11-01 13:52:34,698 - main - INFO - 4단계: 구문 오류 수정 LLM 호출
2025-11-01 13:52:34,748 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 13:52:34,870 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-9c7c5f95-311f-4846-a12e-0adcb87568b3', 'json_data': {'messages': [{'role': 'user', 'content': 'GitHub Actions 워크플로우의 구문 오류를 수정해주세요.\n\n**원본 워크플로우:**\n```yaml\nname: Seed Chain\n\non:\n  workflow_call:\n    inputs:\n      chain-api-url:\n        required: true\n        type: string\n      chain-id:\n        required: true\n        type: string\n      seed-script-filename:\n        required: true\n        type: string\n      erc20-deployer-network-name:\n        required: true\n        type: string\n      genesis_validator_addresses:\n        required: true\n        type: string\n      kava_version_filepath:\n        required: true\n        type: string\n    secrets:\n      DEV_WALLET_MNEMONIC:\n        required: true\n\njobs:\n  seed-chain-state:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout repo from master\n        uses: actions/checkout@v3\n        with:\n         ref: master\n      - name: checkout version of kava used by network\n        run: |\n          git pull -p\n          git checkout $(cat ${KAVA_VERSION_FILEPATH})\n         env:\n            KAVA_VERSION_FILEPATH: ${{ inputs.kava_version_filepath }}\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: "1.19"\n          check-latest: true\n          cache: true\n      - name: build kava binary\n        run: make install\n      - name: checkout go evm tools repo\n        uses: actions/checkout@v3\n        with:\n          repository: ethereum/go-ethereum\n          path: go-ethereum\n          ref: v1.10.26\n      - name: install go evm tools\n        run: |\n          make\n          make devtools\n        working-directory: go-ethereum\n      - name: checkout kava bridge repo for deploying evm contracts\n        uses: actions/checkout@v3\n        with:\n          repository: Kava-Labs/kava-bridge\n          path: kava-bridge\n          ref: main\n      - name: install nodeJS\n        uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 18\n          cache-dependency-path: kava-bridge/contract/package.json\n      - name: "install ERC20 contract deployment dependencies"\n        run: "npm install"\n        working-directory: kava-bridge/contract\n      - name: compile default erc20 contracts\n        run: make compile-contracts\n        working-directory: kava-bridge\n      - name: run seed scripts\n        run: bash ${GITHUB_WORKSPACE}/.github/scripts/${SEED_SCRIPT_FILENAME}\n        working-directory: kava-bridge/contract\n        env:\n          CHAIN_API_URL: ${{ inputs.chain-api-url }}\n          CHAIN_ID: ${{ inputs.chain-id }}\n          DEV_WALLET_MNEMONIC: ${{ secrets.DEV_WALLET_MNEMONIC }}\n          SEED_SCRIPT_FILENAME: ${{ inputs.seed-script-filename }}\n          ERC20_DEPLOYER_NETWORK_NAME: ${{ inputs.erc20-deployer-network-name }}\n          GENESIS_VALIDATOR_ADDRESSES: ${{ inputs.genesis_validator_addresses }}\n\n```\n\n**발견된 구문 오류:**\n1. could not parse as YAML: yaml: line 35: did not find expected key\n   라인 35\n\n**수정 요청:**\n위의 구문 오류를 수정한 완전한 GitHub Actions 워크플로우를 제공해주세요.\n\n**수정 시 고려사항:**\n1. GitHub Actions의 올바른 문법을 따라주세요\n2. 기존 워크플로우의 의도와 기능을 유지해주세요\n3. 모든 구문 오류를 적절히 수정해주세요\n\n**응답 형식:**\n```yaml\n# 수정된 워크플로우\n```\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 13:52:34,894 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 13:52:34,894 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 13:52:34,907 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x110376900>
2025-11-01 13:52:34,907 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x107bedd10> server_hostname='api.openai.com' timeout=60
2025-11-01 13:52:34,920 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11032b110>
2025-11-01 13:52:34,920 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 13:52:34,921 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 13:52:34,921 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 13:52:34,921 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 13:52:34,921 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 13:52:50,388 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 04:52:50 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'14322'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'14644'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199171'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'248ms'), (b'x-request-id', b'req_d7da01931b354d9faa6486079d6b70e4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=0E2VarDUUuEARgE6vZ6BduYKIqeoPSj2pWiwv7jJh3c-1761972770-1.0.1.1-KAO9ERP8_cGs2JloVQVKo5OrpHLtkoVOYsG3KECtNsRSnyyXlVQZTreuS34Cx.FpuCdmF93E3rsO2V4WHuL2o0SzdGs5thRE9he.hiXy9h0; path=/; expires=Sat, 01-Nov-25 05:22:50 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=GMYbn2ApD72HrIHm2LEAiDzOWZQNqvM5EUqOnH1yLVU-1761972770450-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9978c896aab78d31-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 13:52:50,391 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 13:52:50,392 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 13:52:50,401 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 13:52:50,401 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 13:52:50,401 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 13:52:50,401 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 04:52:50 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '14322'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '14644'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199171'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '248ms'), ('x-request-id', 'req_d7da01931b354d9faa6486079d6b70e4'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=0E2VarDUUuEARgE6vZ6BduYKIqeoPSj2pWiwv7jJh3c-1761972770-1.0.1.1-KAO9ERP8_cGs2JloVQVKo5OrpHLtkoVOYsG3KECtNsRSnyyXlVQZTreuS34Cx.FpuCdmF93E3rsO2V4WHuL2o0SzdGs5thRE9he.hiXy9h0; path=/; expires=Sat, 01-Nov-25 05:22:50 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=GMYbn2ApD72HrIHm2LEAiDzOWZQNqvM5EUqOnH1yLVU-1761972770450-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '9978c896aab78d31-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 13:52:50,401 - openai._base_client - DEBUG - request_id: req_d7da01931b354d9faa6486079d6b70e4
2025-11-01 13:52:50,409 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 13:52:50,409 - main - INFO - 5단계: 구문 수정된 YAML 추출
2025-11-01 13:52:50,410 - main - INFO - Phase 1 완료, 수정된 YAML 크기: 2685 문자
2025-11-01 13:52:50,410 - main - INFO - === Phase 2: 스멜 수정 ===
2025-11-01 13:52:50,410 - main - INFO - 6단계: 임시 파일 생성 및 스멜 검사
2025-11-01 13:52:50,412 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_temp_phase1.yml
2025-11-01 13:52:50,412 - main - INFO - 7단계: smell detection 실행
2025-11-01 13:52:50,412 - utils.process_runner - INFO - 명령어 실행: cd /Users/nam/Desktop/repository/Catching-Smells/RQ3/gha-ci-detector_paper/src && /Users/nam/Desktop/repository/Catching-Smells/.venv/bin/python -m gha_ci_detector file /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_temp_phase1.yml
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 명령어 실행 성공 (0.60초)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - Smell detector stdout: Welcome to GHA CI Detector
Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_temp_phase1.yml
We have found 10 smells
	- 3. Use fixed version for runs-on argument (line 29)
	- 6. Define permissions for workflows with external actions (job at line: 29)
	- 8. Use commit hash instead of tags for action versions (line 32)
	- 8. Use commit hash instead of tags for action versions (line 42)
	- 8. Use commit hash instead of tags for action versions (line 67)
	- 9. Steps should only perform a single command (line -1)
	- 10. Avoid jobs without timeouts (line: 29)
	- 12. Avoid workflows without comments
	- 14. Avoid incorrectly formatted workflows
	- 22. Avoid deploying jobs on forks
The following styling errors were found: 
88:81: no new line character at the end of file (new-line-at-end-of-file)

2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - Smell detector stderr: 
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - Smell detector return code: 0
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - Smell detector 출력 라인 수: 15
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 0: Welcome to GHA CI Detector
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Welcome to GHA CI Detector
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 1: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_temp_phase1.yml
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_temp_phase1.yml
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 2: We have found 10 smells
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: We have found 10 smells
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 3: - 3. Use fixed version for runs-on argument (line 29)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#3): Use fixed version for runs-on argument (line 29)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 4: - 6. Define permissions for workflows with external actions (job at line: 29)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 29)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 5: - 8. Use commit hash instead of tags for action versions (line 32)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 32)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 6: - 8. Use commit hash instead of tags for action versions (line 42)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 42)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 7: - 8. Use commit hash instead of tags for action versions (line 67)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 67)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 8: - 9. Steps should only perform a single command (line -1)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#9): Steps should only perform a single command (line -1)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 9: - 10. Avoid jobs without timeouts (line: 29)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 29)
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 10: - 12. Avoid workflows without comments
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#12): Avoid workflows without comments
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 11: - 14. Avoid incorrectly formatted workflows
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#14): Avoid incorrectly formatted workflows
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 12: - 22. Avoid deploying jobs on forks
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#22): Avoid deploying jobs on forks
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 13: The following styling errors were found:
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: The following styling errors were found:
2025-11-01 13:52:51,010 - utils.process_runner - DEBUG - 라인 14: 88:81: no new line character at the end of file (new-line-at-end-of-file)
2025-11-01 13:52:51,010 - utils.process_runner - INFO - 총 1개 대상 스멜 파싱됨 (1,4,5,10,11,15,16번만)
2025-11-01 13:52:51,010 - utils.process_runner - INFO - Smell detector 실행 완료: 1개 스멜 발견
2025-11-01 13:52:51,010 - main - INFO - 스멜 1개 발견
2025-11-01 13:52:51,010 - main - INFO -   스멜 1: Avoid jobs without timeouts (line: 29)
2025-11-01 13:52:51,010 - main - INFO - 8단계: 스멜 수정 프롬프트 생성
2025-11-01 13:52:51,010 - main - INFO - 9단계: 스멜 수정 LLM 호출
2025-11-01 13:52:51,018 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 13:52:51,018 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-2e43396d-0e3e-4309-8927-37ef3c9e0402', 'json_data': {'messages': [{'role': 'user', 'content': 'GitHub Actions 워크플로우의 의미론적 스멜을 수정해주세요.\n\n**현재 워크플로우 (구문 오류는 이미 수정됨):**\n```yaml\nname: Seed Chain\n\non:\n  workflow_call:\n    inputs:\n      chain-api-url:\n        required: true\n        type: string\n      chain-id:\n        required: true\n        type: string\n      seed-script-filename:\n        required: true\n        type: string\n      erc20-deployer-network-name:\n        required: true\n        type: string\n      genesis_validator_addresses:\n        required: true\n        type: string\n      kava_version_filepath:\n        required: true\n        type: string\n    secrets:\n      DEV_WALLET_MNEMONIC:\n        required: true\n\njobs:\n  seed-chain-state:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout repo from master\n        uses: actions/checkout@v3\n        with:\n          ref: master\n      - name: checkout version of kava used by network\n        run: |\n          git pull -p\n          git checkout $(cat ${KAVA_VERSION_FILEPATH})\n        env:\n          KAVA_VERSION_FILEPATH: ${{ inputs.kava_version_filepath }}\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: "1.19"\n          check-latest: true\n          cache: true\n      - name: build kava binary\n        run: make install\n      - name: checkout go evm tools repo\n        uses: actions/checkout@v3\n        with:\n          repository: ethereum/go-ethereum\n          path: go-ethereum\n          ref: v1.10.26\n      - name: install go evm tools\n        run: |\n          make\n          make devtools\n        working-directory: go-ethereum\n      - name: checkout kava bridge repo for deploying evm contracts\n        uses: actions/checkout@v3\n        with:\n          repository: Kava-Labs/kava-bridge\n          path: kava-bridge\n          ref: main\n      - name: install nodeJS\n        uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 18\n          cache-dependency-path: kava-bridge/contract/package.json\n      - name: install ERC20 contract deployment dependencies\n        run: npm install\n        working-directory: kava-bridge/contract\n      - name: compile default erc20 contracts\n        run: make compile-contracts\n        working-directory: kava-bridge\n      - name: run seed scripts\n        run: bash ${GITHUB_WORKSPACE}/.github/scripts/${SEED_SCRIPT_FILENAME}\n        working-directory: kava-bridge/contract\n        env:\n          CHAIN_API_URL: ${{ inputs.chain-api-url }}\n          CHAIN_ID: ${{ inputs.chain-id }}\n          DEV_WALLET_MNEMONIC: ${{ secrets.DEV_WALLET_MNEMONIC }}\n          SEED_SCRIPT_FILENAME: ${{ inputs.seed-script-filename }}\n          ERC20_DEPLOYER_NETWORK_NAME: ${{ inputs.erc20-deployer-network-name }}\n          GENESIS_VALIDATOR_ADDRESSES: ${{ inputs.genesis_validator_addresses }}\n```\n\n**발견된 의미론적 스멜:**\n1. Avoid jobs without timeouts (line: 29)\n   세부사항: - 10. Avoid jobs without timeouts (line: 29)\n\n**수정 요청:**\n위의 의미론적 스멜을 수정하여 개선된 GitHub Actions 워크플로우를 제공해주세요.\n\n**수정 시 고려사항:**\n1. GitHub Actions의 모범 사례를 따라주세요\n2. 워크플로우의 효율성과 안전성을 개선해주세요\n3. 기존 워크플로우의 의도와 기능을 유지해주세요\n4. 모든 스멜을 적절히 수정해주세요\n\n**응답 형식:**\n```yaml\n# 개선된 워크플로우\n```\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 13:52:51,019 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 13:52:51,019 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 13:52:51,024 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1104a1450>
2025-11-01 13:52:51,024 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x107466a30> server_hostname='api.openai.com' timeout=60
2025-11-01 13:52:51,033 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x107e1b490>
2025-11-01 13:52:51,033 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 13:52:51,033 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 13:52:51,033 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 13:52:51,033 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 13:52:51,033 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 13:53:06,705 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 04:53:06 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'14614'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'15020'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199139'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'258ms'), (b'x-request-id', b'req_546b9396f231468db6bebaf59d196d34'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=0RP50X8Hv7PXO6Mee22DN6DESR7a5i4HGJzsQMGSlrw-1761972786-1.0.1.1-zkQ8PyRjMNpDhmMTnYLg_Y7tL8nk_BzGopAFmCDbnChwxdfgFYrFXbGF0PW2CUEBEAN37i2n7bKpoZLOpbRrj8h5_6Uc_3apGWd6Ra8JJ_Y; path=/; expires=Sat, 01-Nov-25 05:23:06 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=N8uO0nQcHloX1xREfVT5thN9_mUd6R5aUjewmCancRA-1761972786768-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9978c8fb6e7fea14-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 13:53:06,706 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 13:53:06,706 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 13:53:06,727 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 13:53:06,727 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 13:53:06,727 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 13:53:06,727 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 04:53:06 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '14614'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '15020'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199139'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '258ms'), ('x-request-id', 'req_546b9396f231468db6bebaf59d196d34'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=0RP50X8Hv7PXO6Mee22DN6DESR7a5i4HGJzsQMGSlrw-1761972786-1.0.1.1-zkQ8PyRjMNpDhmMTnYLg_Y7tL8nk_BzGopAFmCDbnChwxdfgFYrFXbGF0PW2CUEBEAN37i2n7bKpoZLOpbRrj8h5_6Uc_3apGWd6Ra8JJ_Y; path=/; expires=Sat, 01-Nov-25 05:23:06 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=N8uO0nQcHloX1xREfVT5thN9_mUd6R5aUjewmCancRA-1761972786768-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '9978c8fb6e7fea14-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 13:53:06,728 - openai._base_client - DEBUG - request_id: req_546b9396f231468db6bebaf59d196d34
2025-11-01 13:53:06,728 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 13:53:06,728 - main - INFO - 10단계: 최종 수정된 YAML 추출
2025-11-01 13:53:06,728 - main - INFO - Phase 2 완료, 최종 YAML 크기: 2733 문자
2025-11-01 13:53:06,729 - main - DEBUG - 임시 파일 삭제: data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_temp_phase1.yml
2025-11-01 13:53:06,729 - main - INFO - 11단계: 최종 결과 검증 및 저장
2025-11-01 13:53:06,737 - utils.yaml_parser - DEBUG - 파싱된 YAML 객체: {'name': 'Seed Chain', 'on': {'workflow_call': {'inputs': {'chain-api-url': {'required': True, 'type': 'string'}, 'chain-id': {'required': True, 'type': 'string'}, 'seed-script-filename': {'required': True, 'type': 'string'}, 'erc20-deployer-network-name': {'required': True, 'type': 'string'}, 'genesis_validator_addresses': {'required': True, 'type': 'string'}, 'kava_version_filepath': {'required': True, 'type': 'string'}}, 'secrets': {'DEV_WALLET_MNEMONIC': {'required': True}}}}, 'jobs': {'seed-chain-state': {'runs-on': 'ubuntu-latest', 'timeout-minutes': 30, 'steps': [{'name': 'Checkout repo from master', 'uses': 'actions/checkout@v3', 'with': {'ref': 'master'}}, {'name': 'Checkout version of Kava used by network', 'run': 'git pull -p\ngit checkout $(cat ${KAVA_VERSION_FILEPATH})\n', 'env': {'KAVA_VERSION_FILEPATH': '${{ inputs.kava_version_filepath }}'}}, {'name': 'Set up Go', 'uses': 'actions/setup-go@v3', 'with': {'go-version': '1.19', 'check-latest': True, 'cache': True}}, {'name': 'Build Kava binary', 'run': 'make install'}, {'name': 'Checkout Go EVM tools repo', 'uses': 'actions/checkout@v3', 'with': {'repository': 'ethereum/go-ethereum', 'path': 'go-ethereum', 'ref': 'v1.10.26'}}, {'name': 'Install Go EVM tools', 'run': 'make\nmake devtools\n', 'working-directory': 'go-ethereum'}, {'name': 'Checkout Kava bridge repo for deploying EVM contracts', 'uses': 'actions/checkout@v3', 'with': {'repository': 'Kava-Labs/kava-bridge', 'path': 'kava-bridge', 'ref': 'main'}}, {'name': 'Install Node.js', 'uses': 'actions/setup-node@v3', 'with': {'cache': 'npm', 'node-version': 18, 'cache-dependency-path': 'kava-bridge/contract/package.json'}}, {'name': 'Install ERC20 contract deployment dependencies', 'run': 'npm install', 'working-directory': 'kava-bridge/contract'}, {'name': 'Compile default ERC20 contracts', 'run': 'make compile-contracts', 'working-directory': 'kava-bridge'}, {'name': 'Run seed scripts', 'run': 'bash ${GITHUB_WORKSPACE}/.github/scripts/${SEED_SCRIPT_FILENAME}', 'working-directory': 'kava-bridge/contract', 'env': {'CHAIN_API_URL': '${{ inputs.chain-api-url }}', 'CHAIN_ID': '${{ inputs.chain-id }}', 'DEV_WALLET_MNEMONIC': '${{ secrets.DEV_WALLET_MNEMONIC }}', 'SEED_SCRIPT_FILENAME': '${{ inputs.seed-script-filename }}', 'ERC20_DEPLOYER_NETWORK_NAME': '${{ inputs.erc20-deployer-network-name }}', 'GENESIS_VALIDATOR_ADDRESSES': '${{ inputs.genesis_validator_addresses }}'}}]}}}
2025-11-01 13:53:06,738 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_repair_two_phase/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_two_phase_repaired.yml
2025-11-01 13:53:06,738 - main - INFO - 2단계 모드 복구 완료
2025-11-01 13:53:06,738 - main - INFO - 최종 수정된 파일: data_repair_two_phase/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_two_phase_repaired.yml
2025-11-01 13:53:06,738 - __main__ - INFO - === 파일 1/5 2단계 복구 완료 ===
2025-11-01 13:53:06,739 - __main__ - INFO - ✅ 성공 (32.06초): 19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32 -> 19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_two_phase_repaired.yml
2025-11-01 13:53:06,739 - __main__ - INFO - [2/5] 처리 중: 6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428
2025-11-01 13:53:06,739 - __main__ - INFO - 입력 파일 경로: data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428
2025-11-01 13:53:06,739 - __main__ - INFO - 출력 파일 경로: data_repair_two_phase/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_two_phase_repaired.yml
2025-11-01 13:53:06,739 - __main__ - INFO - === 파일 2/5 2단계 복구 시작 ===
2025-11-01 13:53:06,739 - main - INFO - === 2단계 모드 시작 ===
2025-11-01 13:53:06,739 - main - INFO - 1단계: 입력 파일 읽기
2025-11-01 13:53:06,740 - utils.yaml_parser - DEBUG - YAML 파일 읽기 완료: data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428
2025-11-01 13:53:06,740 - main - INFO - 파일 크기: 4982 문자
2025-11-01 13:53:06,740 - main - INFO - === Phase 1: 구문 오류 수정 ===
2025-11-01 13:53:06,740 - main - INFO - 2단계: actionlint 구문 검사
2025-11-01 13:53:06,740 - utils.process_runner - INFO - actionlint 바이너리 발견: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac
2025-11-01 13:53:06,741 - utils.process_runner - INFO - 명령어 실행: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac -format '{{json .}}' data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428
2025-11-01 13:53:06,765 - utils.process_runner - WARNING - 명령어 실행 실패 (코드: 1, 시간: 0.02초)
2025-11-01 13:53:06,765 - utils.process_runner - INFO - actionlint 실행 완료: 오류 발견됨 (코드: 1)
2025-11-01 13:53:06,765 - main - INFO - actionlint에서 3개 오류 발견 (syntax-check 및 expression만)
2025-11-01 13:53:06,765 - main - INFO - actionlint 오류 3개 발견
2025-11-01 13:53:06,765 - main - INFO -   오류 1: expected scalar node for string value but found sequence node with "!!seq" tag
2025-11-01 13:53:06,765 - main - INFO -   오류 2: expected scalar node for string value but found sequence node with "!!seq" tag
2025-11-01 13:53:06,765 - main - INFO -   오류 3: expected scalar node for string value but found sequence node with "!!seq" tag
2025-11-01 13:53:06,765 - main - INFO - 3단계: 구문 오류 수정 프롬프트 생성
2025-11-01 13:53:06,765 - main - INFO - 4단계: 구문 오류 수정 LLM 호출
2025-11-01 13:53:06,772 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 13:53:06,773 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-e27ee777-55f3-4a5b-a155-b280f28250eb', 'json_data': {'messages': [{'role': 'user', 'content': 'GitHub Actions 워크플로우의 구문 오류를 수정해주세요.\n\n**원본 워크플로우:**\n```yaml\nname: Build Containers\n\non:\n  workflow_call:\n    inputs:\n      tag:\n        required: true\n        type: string\n    secrets:\n      DOCKERHUB_USERNAME:\n        required: true\n      DOCKERHUB_TOKEN:\n        required: true\n\njobs:\n  build-frontend:\n    runs-on: ubuntu-latest\n    name: Build Frontend\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: |\n              hkotel/mealie\n              ghcr.io/${{ github.repository }}\n\n      - name: Build and push Frontend images\n        uses: docker/build-push-action@v4\n        with:\n          file: docker/frontend.Dockerfile\n          context: .\n          push: true\n          tags: frontend-${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms:\n            - linux/amd64\n            - linux/arm64\n\n  build-backend:\n    runs-on: ubuntu-latest\n    name: Build Backend\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Override __init__.py\n        run: |\n          echo "__version__ = \\"${{ inputs.tag }}\\"" > ./mealie/__init__.py\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: |\n            hkotel/mealie\n            ghcr.io/${{ github.repository }}\n\n      - name: Build and push API images\n        uses: docker/build-push-action@v4\n        with:\n          file: docker/api.Dockerfile\n          context: .\n          push: true\n          tags: api-${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms:\n            - linux/amd64\n            - linux/arm64\n\n  build-omni:\n    runs-on: ubuntu-latest\n    name: Build Omni\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Override __init__.py\n        run: |\n          echo "__version__ = \\"${{ inputs.tag }}\\"" > ./mealie/__init__.py\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: |\n            hkotel/mealie\n            ghcr.io/${{ github.repository }}\n\n      - name: Build and push API images\n        uses: docker/build-push-action@v4\n        with:\n          file: docker/omni.Dockerfile\n          context: .\n          push: true\n          tags: omni-${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms:\n            - linux/amd64\n            - linux/arm64\n\n```\n\n**발견된 구문 오류:**\n1. expected scalar node for string value but found sequence node with "!!seq" tag\n   라인 66\n2. expected scalar node for string value but found sequence node with "!!seq" tag\n   라인 123\n3. expected scalar node for string value but found sequence node with "!!seq" tag\n   라인 180\n\n**수정 요청:**\n위의 구문 오류를 수정한 완전한 GitHub Actions 워크플로우를 제공해주세요.\n\n**수정 시 고려사항:**\n1. GitHub Actions의 올바른 문법을 따라주세요\n2. 기존 워크플로우의 의도와 기능을 유지해주세요\n3. 모든 구문 오류를 적절히 수정해주세요\n\n**응답 형식:**\n```yaml\n# 수정된 워크플로우\n```\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 13:53:06,773 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 13:53:06,773 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 13:53:06,780 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x107e1bce0>
2025-11-01 13:53:06,780 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x107491e50> server_hostname='api.openai.com' timeout=60
2025-11-01 13:53:06,788 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11035e690>
2025-11-01 13:53:06,788 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 13:53:06,788 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 13:53:06,789 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 13:53:06,789 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 13:53:06,789 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 13:53:29,067 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 04:53:29 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'21198'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'21529'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'198547'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'435ms'), (b'x-request-id', b'req_0fc7fa331aa04242ac1823a8187da5a6'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=evCziqaRdUQf9RzTyyWiF3Hp2udtPAQILDFRe1kl4go-1761972809-1.0.1.1-J.z1b65IC2nuz8zG07EJO_K4vwp6PN9bf3FzCIDvQdKrYIqoB12StUgp1oy4yPOWaQe2HbrTLsoFQisUPDqjeSLpK2Yp0KFewbvR73vgSDw; path=/; expires=Sat, 01-Nov-25 05:23:29 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=PqM6pwQJfg5Zl6mvCvc6WUyYSkZ1doXz4vBSmoTsREY-1761972809130-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9978c95ddd4320d9-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 13:53:29,069 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 13:53:29,069 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 13:53:29,072 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 13:53:29,072 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 13:53:29,072 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 13:53:29,072 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 04:53:29 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '21198'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '21529'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '198547'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '435ms'), ('x-request-id', 'req_0fc7fa331aa04242ac1823a8187da5a6'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=evCziqaRdUQf9RzTyyWiF3Hp2udtPAQILDFRe1kl4go-1761972809-1.0.1.1-J.z1b65IC2nuz8zG07EJO_K4vwp6PN9bf3FzCIDvQdKrYIqoB12StUgp1oy4yPOWaQe2HbrTLsoFQisUPDqjeSLpK2Yp0KFewbvR73vgSDw; path=/; expires=Sat, 01-Nov-25 05:23:29 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=PqM6pwQJfg5Zl6mvCvc6WUyYSkZ1doXz4vBSmoTsREY-1761972809130-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '9978c95ddd4320d9-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 13:53:29,072 - openai._base_client - DEBUG - request_id: req_0fc7fa331aa04242ac1823a8187da5a6
2025-11-01 13:53:29,073 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 13:53:29,073 - main - INFO - 5단계: 구문 수정된 YAML 추출
2025-11-01 13:53:29,074 - main - INFO - Phase 1 완료, 수정된 YAML 크기: 4665 문자
2025-11-01 13:53:29,074 - main - INFO - === Phase 2: 스멜 수정 ===
2025-11-01 13:53:29,074 - main - INFO - 6단계: 임시 파일 생성 및 스멜 검사
2025-11-01 13:53:29,074 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_temp_phase1.yml
2025-11-01 13:53:29,074 - main - INFO - 7단계: smell detection 실행
2025-11-01 13:53:29,075 - utils.process_runner - INFO - 명령어 실행: cd /Users/nam/Desktop/repository/Catching-Smells/RQ3/gha-ci-detector_paper/src && /Users/nam/Desktop/repository/Catching-Smells/.venv/bin/python -m gha_ci_detector file /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_temp_phase1.yml
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 명령어 실행 성공 (0.49초)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - Smell detector stdout: Welcome to GHA CI Detector
Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_temp_phase1.yml
We have found 23 smells
	- 2. Prevent running issue/PR actions on forks line -1:51
	- 3. Use fixed version for runs-on argument (line 16)
	- 6. Define permissions for workflows with external actions (job at line: 122)
	- 6. Define permissions for workflows with external actions (job at line: 16)
	- 6. Define permissions for workflows with external actions (job at line: 67)
	- 8. Use commit hash instead of tags for action versions (line 24)
	- 8. Use commit hash instead of tags for action versions (line 57)
	- 8. Use commit hash instead of tags for action versions (line 31)
	- 8. Use commit hash instead of tags for action versions (line 50)
	- 8. Use commit hash instead of tags for action versions (line 20)
	- 8. Use commit hash instead of tags for action versions (line 36)
	- 10. Avoid jobs without timeouts (line: 16)
	- 10. Avoid jobs without timeouts (line: 67)
	- 10. Avoid jobs without timeouts (line: 122)
	- 12. Avoid workflows without comments
	- 14. Avoid incorrectly formatted workflows
	- 15. Use permissions whenever using Github Token (job at line 16)
	- 15. Use permissions whenever using Github Token (job at line 67)
	- 15. Use permissions whenever using Github Token (job at line 122)
	- 19. Run tests on multiple OS's (job: build-omni)
	- 19. Run tests on multiple OS's (job: build-frontend)
	- 19. Run tests on multiple OS's (job: build-backend)
	- 22. Avoid deploying jobs on forks
The following styling errors were found: 
175:45: no new line character at the end of file (new-line-at-end-of-file)

2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - Smell detector stderr: 
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - Smell detector return code: 0
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - Smell detector 출력 라인 수: 28
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 라인 0: Welcome to GHA CI Detector
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Welcome to GHA CI Detector
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 라인 1: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_temp_phase1.yml
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_temp_phase1.yml
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 라인 2: We have found 23 smells
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: We have found 23 smells
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 라인 3: - 2. Prevent running issue/PR actions on forks line -1:51
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#2): Prevent running issue/PR actions on forks line -1:51
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 라인 4: - 3. Use fixed version for runs-on argument (line 16)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#3): Use fixed version for runs-on argument (line 16)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 라인 5: - 6. Define permissions for workflows with external actions (job at line: 122)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 122)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 라인 6: - 6. Define permissions for workflows with external actions (job at line: 16)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 16)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 라인 7: - 6. Define permissions for workflows with external actions (job at line: 67)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 67)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 라인 8: - 8. Use commit hash instead of tags for action versions (line 24)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 24)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 라인 9: - 8. Use commit hash instead of tags for action versions (line 57)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 57)
2025-11-01 13:53:29,560 - utils.process_runner - DEBUG - 라인 10: - 8. Use commit hash instead of tags for action versions (line 31)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 31)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 11: - 8. Use commit hash instead of tags for action versions (line 50)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 50)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 12: - 8. Use commit hash instead of tags for action versions (line 20)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 20)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 13: - 8. Use commit hash instead of tags for action versions (line 36)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 36)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 14: - 10. Avoid jobs without timeouts (line: 16)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 16)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 15: - 10. Avoid jobs without timeouts (line: 67)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 67)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 16: - 10. Avoid jobs without timeouts (line: 122)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 122)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 17: - 12. Avoid workflows without comments
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#12): Avoid workflows without comments
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 18: - 14. Avoid incorrectly formatted workflows
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#14): Avoid incorrectly formatted workflows
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 19: - 15. Use permissions whenever using Github Token (job at line 16)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 스멜 감지 (#15): Use permissions whenever using Github Token (job at line 16)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 20: - 15. Use permissions whenever using Github Token (job at line 67)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 스멜 감지 (#15): Use permissions whenever using Github Token (job at line 67)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 21: - 15. Use permissions whenever using Github Token (job at line 122)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 스멜 감지 (#15): Use permissions whenever using Github Token (job at line 122)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 22: - 19. Run tests on multiple OS's (job: build-omni)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#19): Run tests on multiple OS's (job: build-omni)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 23: - 19. Run tests on multiple OS's (job: build-frontend)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#19): Run tests on multiple OS's (job: build-frontend)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 24: - 19. Run tests on multiple OS's (job: build-backend)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#19): Run tests on multiple OS's (job: build-backend)
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 25: - 22. Avoid deploying jobs on forks
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#22): Avoid deploying jobs on forks
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 26: The following styling errors were found:
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: The following styling errors were found:
2025-11-01 13:53:29,561 - utils.process_runner - DEBUG - 라인 27: 175:45: no new line character at the end of file (new-line-at-end-of-file)
2025-11-01 13:53:29,561 - utils.process_runner - INFO - 총 6개 대상 스멜 파싱됨 (1,4,5,10,11,15,16번만)
2025-11-01 13:53:29,561 - utils.process_runner - INFO - Smell detector 실행 완료: 6개 스멜 발견
2025-11-01 13:53:29,561 - main - INFO - 스멜 6개 발견
2025-11-01 13:53:29,561 - main - INFO -   스멜 1: Avoid jobs without timeouts (line: 16)
2025-11-01 13:53:29,561 - main - INFO -   스멜 2: Avoid jobs without timeouts (line: 67)
2025-11-01 13:53:29,561 - main - INFO -   스멜 3: Avoid jobs without timeouts (line: 122)
2025-11-01 13:53:29,561 - main - INFO - 8단계: 스멜 수정 프롬프트 생성
2025-11-01 13:53:29,561 - main - INFO - 9단계: 스멜 수정 LLM 호출
2025-11-01 13:53:29,569 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 13:53:29,569 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-80dfbf4c-b4c4-48e6-ae03-967637b29ea3', 'json_data': {'messages': [{'role': 'user', 'content': 'GitHub Actions 워크플로우의 의미론적 스멜을 수정해주세요.\n\n**현재 워크플로우 (구문 오류는 이미 수정됨):**\n```yaml\nname: Build Containers\n\non:\n  workflow_call:\n    inputs:\n      tag:\n        required: true\n        type: string\n    secrets:\n      DOCKERHUB_USERNAME:\n        required: true\n      DOCKERHUB_TOKEN:\n        required: true\n\njobs:\n  build-frontend:\n    runs-on: ubuntu-latest\n    name: Build Frontend\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: |\n            hkotel/mealie\n            ghcr.io/${{ github.repository }}\n\n      - name: Build and push Frontend images\n        uses: docker/build-push-action@v4\n        with:\n          file: docker/frontend.Dockerfile\n          context: .\n          push: true\n          tags: frontend-${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64,linux/arm64\n\n  build-backend:\n    runs-on: ubuntu-latest\n    name: Build Backend\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Override __init__.py\n        run: |\n          echo "__version__ = \\"${{ inputs.tag }}\\"" > ./mealie/__init__.py\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: |\n            hkotel/mealie\n            ghcr.io/${{ github.repository }}\n\n      - name: Build and push API images\n        uses: docker/build-push-action@v4\n        with:\n          file: docker/api.Dockerfile\n          context: .\n          push: true\n          tags: api-${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64,linux/arm64\n\n  build-omni:\n    runs-on: ubuntu-latest\n    name: Build Omni\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Override __init__.py\n        run: |\n          echo "__version__ = \\"${{ inputs.tag }}\\"" > ./mealie/__init__.py\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: |\n            hkotel/mealie\n            ghcr.io/${{ github.repository }}\n\n      - name: Build and push API images\n        uses: docker/build-push-action@v4\n        with:\n          file: docker/omni.Dockerfile\n          context: .\n          push: true\n          tags: omni-${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64,linux/arm64\n```\n\n**발견된 의미론적 스멜:**\n1. Avoid jobs without timeouts (line: 16)\n   세부사항: - 10. Avoid jobs without timeouts (line: 16)\n2. Avoid jobs without timeouts (line: 67)\n   세부사항: - 10. Avoid jobs without timeouts (line: 67)\n3. Avoid jobs without timeouts (line: 122)\n   세부사항: - 10. Avoid jobs without timeouts (line: 122)\n4. Use permissions whenever using Github Token (job at line 16)\n   세부사항: - 15. Use permissions whenever using Github Token (job at line 16)\n5. Use permissions whenever using Github Token (job at line 67)\n   세부사항: - 15. Use permissions whenever using Github Token (job at line 67)\n6. Use permissions whenever using Github Token (job at line 122)\n   세부사항: - 15. Use permissions whenever using Github Token (job at line 122)\n\n**수정 요청:**\n위의 의미론적 스멜을 수정하여 개선된 GitHub Actions 워크플로우를 제공해주세요.\n\n**수정 시 고려사항:**\n1. GitHub Actions의 모범 사례를 따라주세요\n2. 워크플로우의 효율성과 안전성을 개선해주세요\n3. 기존 워크플로우의 의도와 기능을 유지해주세요\n4. 모든 스멜을 적절히 수정해주세요\n\n**응답 형식:**\n```yaml\n# 개선된 워크플로우\n```\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 13:53:29,569 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 13:53:29,570 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 13:53:29,578 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11042d6a0>
2025-11-01 13:53:29,578 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1074922b0> server_hostname='api.openai.com' timeout=60
2025-11-01 13:53:29,586 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11042d7b0>
2025-11-01 13:53:29,586 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 13:53:29,587 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 13:53:29,587 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 13:53:29,587 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 13:53:29,587 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 13:53:51,741 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 04:53:51 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'21933'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'21961'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'198480'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'456ms'), (b'x-request-id', b'req_498e5417eea94bf5bef14c424741a0e0'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=.H_5CRoCzurWUni8T0lRzJgaBKVjJ_jbu02zZQIjS2I-1761972831-1.0.1.1-wNkXU.vp7Uvfv124nwv6lfs5e8ClCE6ymFb8ncp9Z6zOSKxgqcVCehNluEOKRkx.pbkfSZc36TVtk8sNC5SdczXq.a1Ab.2kn7ZZNUOSjfk; path=/; expires=Sat, 01-Nov-25 05:23:51 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=5uMkMYMJL7RVoU1hylrFqi.xjlcNLT_spHH5qoHtYSY-1761972831802-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9978c9ec58ab723a-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 13:53:51,744 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 13:53:51,744 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 13:53:51,745 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 13:53:51,745 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 13:53:51,745 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 13:53:51,745 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 04:53:51 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '21933'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '21961'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '198480'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '456ms'), ('x-request-id', 'req_498e5417eea94bf5bef14c424741a0e0'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=.H_5CRoCzurWUni8T0lRzJgaBKVjJ_jbu02zZQIjS2I-1761972831-1.0.1.1-wNkXU.vp7Uvfv124nwv6lfs5e8ClCE6ymFb8ncp9Z6zOSKxgqcVCehNluEOKRkx.pbkfSZc36TVtk8sNC5SdczXq.a1Ab.2kn7ZZNUOSjfk; path=/; expires=Sat, 01-Nov-25 05:23:51 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=5uMkMYMJL7RVoU1hylrFqi.xjlcNLT_spHH5qoHtYSY-1761972831802-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '9978c9ec58ab723a-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 13:53:51,745 - openai._base_client - DEBUG - request_id: req_498e5417eea94bf5bef14c424741a0e0
2025-11-01 13:53:51,747 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 13:53:51,747 - main - INFO - 10단계: 최종 수정된 YAML 추출
2025-11-01 13:53:51,748 - main - INFO - Phase 2 완료, 최종 YAML 크기: 5070 문자
2025-11-01 13:53:51,748 - main - DEBUG - 임시 파일 삭제: data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_temp_phase1.yml
2025-11-01 13:53:51,748 - main - INFO - 11단계: 최종 결과 검증 및 저장
2025-11-01 13:53:51,755 - httpcore.connection - DEBUG - close.started
2025-11-01 13:53:51,757 - httpcore.connection - DEBUG - close.complete
2025-11-01 13:53:51,757 - httpcore.connection - DEBUG - close.started
2025-11-01 13:53:51,757 - httpcore.connection - DEBUG - close.complete
2025-11-01 13:53:51,757 - httpcore.connection - DEBUG - close.started
2025-11-01 13:53:51,758 - httpcore.connection - DEBUG - close.complete
2025-11-01 13:53:51,771 - utils.yaml_parser - DEBUG - 파싱된 YAML 객체: {'name': 'Build Containers', 'on': {'workflow_call': {'inputs': {'tag': {'required': True, 'type': 'string'}}, 'secrets': {'DOCKERHUB_USERNAME': {'required': True}, 'DOCKERHUB_TOKEN': {'required': True}}}}, 'jobs': {'build-frontend': {'runs-on': 'ubuntu-latest', 'name': 'Build Frontend', 'timeout-minutes': 30, 'permissions': {'contents': 'read', 'packages': 'write'}, 'steps': [{'name': 'Checkout', 'uses': 'actions/checkout@v3'}, {'name': 'Set up QEMU', 'id': 'qemu', 'uses': 'docker/setup-qemu-action@v2', 'with': {'image': 'tonistiigi/binfmt:latest', 'platforms': 'all'}}, {'name': 'Set up Docker Buildx', 'id': 'buildx', 'uses': 'docker/setup-buildx-action@v2', 'with': {'install': True}}, {'name': 'Login to Docker Hub', 'uses': 'docker/login-action@v2', 'with': {'username': '${{ secrets.DOCKERHUB_USERNAME }}', 'password': '${{ secrets.DOCKERHUB_TOKEN }}'}}, {'name': 'Log in to the Container registry', 'uses': 'docker/login-action@v2', 'with': {'registry': 'ghcr.io', 'username': '${{ github.actor }}', 'password': '${{ secrets.GITHUB_TOKEN }}'}}, {'name': 'Extract metadata (tags, labels) for Docker', 'id': 'meta', 'uses': 'docker/metadata-action@v4', 'with': {'images': 'hkotel/mealie\nghcr.io/${{ github.repository }}\n'}}, {'name': 'Build and push Frontend images', 'uses': 'docker/build-push-action@v4', 'with': {'file': 'docker/frontend.Dockerfile', 'context': '.', 'push': True, 'tags': 'frontend-${{ steps.meta.outputs.tags }}', 'labels': '${{ steps.meta.outputs.labels }}', 'platforms': 'linux/amd64,linux/arm64'}}]}, 'build-backend': {'runs-on': 'ubuntu-latest', 'name': 'Build Backend', 'timeout-minutes': 30, 'permissions': {'contents': 'read', 'packages': 'write'}, 'steps': [{'name': 'Checkout', 'uses': 'actions/checkout@v3'}, {'name': 'Set up QEMU', 'id': 'qemu', 'uses': 'docker/setup-qemu-action@v2', 'with': {'image': 'tonistiigi/binfmt:latest', 'platforms': 'all'}}, {'name': 'Set up Docker Buildx', 'id': 'buildx', 'uses': 'docker/setup-buildx-action@v2', 'with': {'install': True}}, {'name': 'Login to Docker Hub', 'uses': 'docker/login-action@v2', 'with': {'username': '${{ secrets.DOCKERHUB_USERNAME }}', 'password': '${{ secrets.DOCKERHUB_TOKEN }}'}}, {'name': 'Override __init__.py', 'run': 'echo "__version__ = \\"${{ inputs.tag }}\\"" > ./mealie/__init__.py\n'}, {'name': 'Log in to the Container registry', 'uses': 'docker/login-action@v2', 'with': {'registry': 'ghcr.io', 'username': '${{ github.actor }}', 'password': '${{ secrets.GITHUB_TOKEN }}'}}, {'name': 'Extract metadata (tags, labels) for Docker', 'id': 'meta', 'uses': 'docker/metadata-action@v4', 'with': {'images': 'hkotel/mealie\nghcr.io/${{ github.repository }}\n'}}, {'name': 'Build and push API images', 'uses': 'docker/build-push-action@v4', 'with': {'file': 'docker/api.Dockerfile', 'context': '.', 'push': True, 'tags': 'api-${{ steps.meta.outputs.tags }}', 'labels': '${{ steps.meta.outputs.labels }}', 'platforms': 'linux/amd64,linux/arm64'}}]}, 'build-omni': {'runs-on': 'ubuntu-latest', 'name': 'Build Omni', 'timeout-minutes': 30, 'permissions': {'contents': 'read', 'packages': 'write'}, 'steps': [{'name': 'Checkout', 'uses': 'actions/checkout@v3'}, {'name': 'Set up QEMU', 'id': 'qemu', 'uses': 'docker/setup-qemu-action@v2', 'with': {'image': 'tonistiigi/binfmt:latest', 'platforms': 'all'}}, {'name': 'Set up Docker Buildx', 'id': 'buildx', 'uses': 'docker/setup-buildx-action@v2', 'with': {'install': True}}, {'name': 'Login to Docker Hub', 'uses': 'docker/login-action@v2', 'with': {'username': '${{ secrets.DOCKERHUB_USERNAME }}', 'password': '${{ secrets.DOCKERHUB_TOKEN }}'}}, {'name': 'Override __init__.py', 'run': 'echo "__version__ = \\"${{ inputs.tag }}\\"" > ./mealie/__init__.py\n'}, {'name': 'Log in to the Container registry', 'uses': 'docker/login-action@v2', 'with': {'registry': 'ghcr.io', 'username': '${{ github.actor }}', 'password': '${{ secrets.GITHUB_TOKEN }}'}}, {'name': 'Extract metadata (tags, labels) for Docker', 'id': 'meta', 'uses': 'docker/metadata-action@v4', 'with': {'images': 'hkotel/mealie\nghcr.io/${{ github.repository }}\n'}}, {'name': 'Build and push API images', 'uses': 'docker/build-push-action@v4', 'with': {'file': 'docker/omni.Dockerfile', 'context': '.', 'push': True, 'tags': 'omni-${{ steps.meta.outputs.tags }}', 'labels': '${{ steps.meta.outputs.labels }}', 'platforms': 'linux/amd64,linux/arm64'}}]}}}
2025-11-01 13:53:51,771 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_repair_two_phase/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_two_phase_repaired.yml
2025-11-01 13:53:51,771 - main - INFO - 2단계 모드 복구 완료
2025-11-01 13:53:51,771 - main - INFO - 최종 수정된 파일: data_repair_two_phase/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_two_phase_repaired.yml
2025-11-01 13:53:51,772 - __main__ - INFO - === 파일 2/5 2단계 복구 완료 ===
2025-11-01 13:53:51,772 - __main__ - INFO - ✅ 성공 (45.03초): 6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428 -> 6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_two_phase_repaired.yml
2025-11-01 13:53:51,772 - __main__ - INFO - [3/5] 처리 중: a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775
2025-11-01 13:53:51,772 - __main__ - INFO - 입력 파일 경로: data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775
2025-11-01 13:53:51,772 - __main__ - INFO - 출력 파일 경로: data_repair_two_phase/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_two_phase_repaired.yml
2025-11-01 13:53:51,772 - __main__ - INFO - === 파일 3/5 2단계 복구 시작 ===
2025-11-01 13:53:51,772 - main - INFO - === 2단계 모드 시작 ===
2025-11-01 13:53:51,772 - main - INFO - 1단계: 입력 파일 읽기
2025-11-01 13:53:51,773 - utils.yaml_parser - DEBUG - YAML 파일 읽기 완료: data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775
2025-11-01 13:53:51,773 - main - INFO - 파일 크기: 1695 문자
2025-11-01 13:53:51,773 - main - INFO - === Phase 1: 구문 오류 수정 ===
2025-11-01 13:53:51,773 - main - INFO - 2단계: actionlint 구문 검사
2025-11-01 13:53:51,773 - utils.process_runner - INFO - actionlint 바이너리 발견: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac
2025-11-01 13:53:51,773 - utils.process_runner - INFO - 명령어 실행: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac -format '{{json .}}' data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775
2025-11-01 13:53:51,799 - utils.process_runner - WARNING - 명령어 실행 실패 (코드: 1, 시간: 0.03초)
2025-11-01 13:53:51,799 - utils.process_runner - INFO - actionlint 실행 완료: 오류 발견됨 (코드: 1)
2025-11-01 13:53:51,799 - main - INFO - actionlint에서 2개 오류 발견 (syntax-check 및 expression만)
2025-11-01 13:53:51,799 - main - INFO - actionlint 오류 2개 발견
2025-11-01 13:53:51,799 - main - INFO -   오류 1: expected "inputs" key for "workflow_dispatch" section but got "customSnap"
2025-11-01 13:53:51,799 - main - INFO -   오류 2: property "customsnap" is not defined in object type {}
2025-11-01 13:53:51,799 - main - INFO - 3단계: 구문 오류 수정 프롬프트 생성
2025-11-01 13:53:51,799 - main - INFO - 4단계: 구문 오류 수정 LLM 호출
2025-11-01 13:53:51,807 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 13:53:51,808 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-01eb88a5-9793-456f-b0fc-e3668f3af851', 'json_data': {'messages': [{'role': 'user', 'content': 'GitHub Actions 워크플로우의 구문 오류를 수정해주세요.\n\n**원본 워크플로우:**\n```yaml\nname: Build a Branch Specific Snapshot\n\non:\n  workflow_dispatch:\n    inputs:\n    customSnap:\n      description: \'Custom Snapshot Name\'\n      required: false\n      type: string\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      BUILD_EVENT: ${{ github.event_name }}\n      BRANCH_REF_NAME: ${{ github.ref_name }}\n      CUSTOM_SNAPSHOT_NAME: ${{ inputs.customSnap }}\n      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n      OSSRH_PASSWORD: ${{ secrets.OSSRH_TOKEN }}\n      SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}\n      SIGNING_KEY: ${{ secrets.SIGNING_KEY }}\n      SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}\n      COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}\n      GODEBUG: x509sha1=1\n    steps:\n      - name: Setup JDK\n        uses: actions/setup-java@v4\n        with:\n          java-version: \'8\'\n          distribution: \'adopt\'\n      - name: Setup GO\n        uses: actions/setup-go@v4\n        with:\n          go-version: \'1.21.4\'\n      - name: Install Nats Server\n        run: |\n          cd $GITHUB_WORKSPACE\n          git clone https://github.com/nats-io/nats-server.git\n          cd nats-server\n          go get\n          go build main.go\n          mkdir -p ~/.local/bin\n          cp main ~/.local/bin/nats-server\n          cd ..\n          rm -rf nats-server\n          nats-server -v\n      - name: Check out code\n        uses: actions/checkout@v4\n      - name: Build and Test\n        run: chmod +x gradlew && ./gradlew clean test jacocoTestReport coveralls\n      - name: Verify Javadoc\n        if: ${{ success() }}\n        run: ./gradlew javadoc\n      - name: Publish Branch Snapshot\n        if: ${{ success() }}\n        run: ./gradlew -i publishToSonatype\n\n\n\n```\n\n**발견된 구문 오류:**\n1. expected "inputs" key for "workflow_dispatch" section but got "customSnap"\n   라인 6\n2. property "customsnap" is not defined in object type {}\n   라인 17\n\n**수정 요청:**\n위의 구문 오류를 수정한 완전한 GitHub Actions 워크플로우를 제공해주세요.\n\n**수정 시 고려사항:**\n1. GitHub Actions의 올바른 문법을 따라주세요\n2. 기존 워크플로우의 의도와 기능을 유지해주세요\n3. 모든 구문 오류를 적절히 수정해주세요\n\n**응답 형식:**\n```yaml\n# 수정된 워크플로우\n```\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 13:53:51,809 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 13:53:51,809 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 13:53:51,816 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x110461250>
2025-11-01 13:53:51,816 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x107492530> server_hostname='api.openai.com' timeout=60
2025-11-01 13:53:51,824 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x110461450>
2025-11-01 13:53:51,824 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 13:53:51,825 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 13:53:51,825 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 13:53:51,825 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 13:53:51,825 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 13:54:04,081 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 04:54:04 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'11489'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'11746'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199401'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'179ms'), (b'x-request-id', b'req_9e9b62ac3b194058978021ff9f2eaaf4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=bjiQofhUw7ePXjpyfI8N8EeEROBZyXqK2sXNlxS.YBg-1761972844-1.0.1.1-QpnUe6OaaQ6GA9EzzZiDdty8j4Wii6MWcSPmmYX80ArwD3VawLW2ObugRH3zQGa4YIRmwCWuopTVWo81SHb9BIyUCc3Va9vL0olK7Pgruz8; path=/; expires=Sat, 01-Nov-25 05:24:04 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=O2e6a6Gp3wtwek5tlc66Hk5gqMjiA.SNSFYR1hEZBZQ-1761972844147-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9978ca7758d3d1d1-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 13:54:04,082 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 13:54:04,083 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 13:54:04,092 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 13:54:04,093 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 13:54:04,093 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 13:54:04,093 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 04:54:04 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '11489'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '11746'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199401'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '179ms'), ('x-request-id', 'req_9e9b62ac3b194058978021ff9f2eaaf4'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=bjiQofhUw7ePXjpyfI8N8EeEROBZyXqK2sXNlxS.YBg-1761972844-1.0.1.1-QpnUe6OaaQ6GA9EzzZiDdty8j4Wii6MWcSPmmYX80ArwD3VawLW2ObugRH3zQGa4YIRmwCWuopTVWo81SHb9BIyUCc3Va9vL0olK7Pgruz8; path=/; expires=Sat, 01-Nov-25 05:24:04 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=O2e6a6Gp3wtwek5tlc66Hk5gqMjiA.SNSFYR1hEZBZQ-1761972844147-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '9978ca7758d3d1d1-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 13:54:04,093 - openai._base_client - DEBUG - request_id: req_9e9b62ac3b194058978021ff9f2eaaf4
2025-11-01 13:54:04,094 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 13:54:04,094 - main - INFO - 5단계: 구문 수정된 YAML 추출
2025-11-01 13:54:04,094 - main - INFO - Phase 1 완료, 수정된 YAML 크기: 1822 문자
2025-11-01 13:54:04,094 - main - INFO - === Phase 2: 스멜 수정 ===
2025-11-01 13:54:04,094 - main - INFO - 6단계: 임시 파일 생성 및 스멜 검사
2025-11-01 13:54:04,095 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_temp_phase1.yml
2025-11-01 13:54:04,095 - main - INFO - 7단계: smell detection 실행
2025-11-01 13:54:04,095 - utils.process_runner - INFO - 명령어 실행: cd /Users/nam/Desktop/repository/Catching-Smells/RQ3/gha-ci-detector_paper/src && /Users/nam/Desktop/repository/Catching-Smells/.venv/bin/python -m gha_ci_detector file /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_temp_phase1.yml
2025-11-01 13:54:04,631 - utils.process_runner - DEBUG - 명령어 실행 성공 (0.54초)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - Smell detector stdout: Welcome to GHA CI Detector
Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_temp_phase1.yml
We have found 11 smells
	- 3. Use fixed version for runs-on argument (line 12)
	- 6. Define permissions for workflows with external actions (job at line: 12)
	- 8. Use commit hash instead of tags for action versions (line 26)
	- 8. Use commit hash instead of tags for action versions (line 31)
	- 8. Use commit hash instead of tags for action versions (line 47)
	- 9. Steps should only perform a single command (line -1)
	- 10. Avoid jobs without timeouts (line: 12)
	- 14. Avoid incorrectly formatted workflows
	- 19. Run tests on multiple OS's (job: build)
	- 20. Run CI on multiple language versions (job: build)
	- 22. Avoid deploying jobs on forks
The following styling errors were found: 
56:44: no new line character at the end of file (new-line-at-end-of-file)

2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - Smell detector stderr: 
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - Smell detector return code: 0
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - Smell detector 출력 라인 수: 16
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 라인 0: Welcome to GHA CI Detector
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Welcome to GHA CI Detector
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 라인 1: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_temp_phase1.yml
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_temp_phase1.yml
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 라인 2: We have found 11 smells
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: We have found 11 smells
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 라인 3: - 3. Use fixed version for runs-on argument (line 12)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#3): Use fixed version for runs-on argument (line 12)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 라인 4: - 6. Define permissions for workflows with external actions (job at line: 12)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 12)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 라인 5: - 8. Use commit hash instead of tags for action versions (line 26)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 26)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 라인 6: - 8. Use commit hash instead of tags for action versions (line 31)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 31)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 라인 7: - 8. Use commit hash instead of tags for action versions (line 47)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 47)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 라인 8: - 9. Steps should only perform a single command (line -1)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#9): Steps should only perform a single command (line -1)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 라인 9: - 10. Avoid jobs without timeouts (line: 12)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 12)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 라인 10: - 14. Avoid incorrectly formatted workflows
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#14): Avoid incorrectly formatted workflows
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 라인 11: - 19. Run tests on multiple OS's (job: build)
2025-11-01 13:54:04,632 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#19): Run tests on multiple OS's (job: build)
2025-11-01 13:54:04,633 - utils.process_runner - DEBUG - 라인 12: - 20. Run CI on multiple language versions (job: build)
2025-11-01 13:54:04,633 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#20): Run CI on multiple language versions (job: build)
2025-11-01 13:54:04,633 - utils.process_runner - DEBUG - 라인 13: - 22. Avoid deploying jobs on forks
2025-11-01 13:54:04,633 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#22): Avoid deploying jobs on forks
2025-11-01 13:54:04,633 - utils.process_runner - DEBUG - 라인 14: The following styling errors were found:
2025-11-01 13:54:04,633 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: The following styling errors were found:
2025-11-01 13:54:04,633 - utils.process_runner - DEBUG - 라인 15: 56:44: no new line character at the end of file (new-line-at-end-of-file)
2025-11-01 13:54:04,633 - utils.process_runner - INFO - 총 1개 대상 스멜 파싱됨 (1,4,5,10,11,15,16번만)
2025-11-01 13:54:04,633 - utils.process_runner - INFO - Smell detector 실행 완료: 1개 스멜 발견
2025-11-01 13:54:04,633 - main - INFO - 스멜 1개 발견
2025-11-01 13:54:04,633 - main - INFO -   스멜 1: Avoid jobs without timeouts (line: 12)
2025-11-01 13:54:04,633 - main - INFO - 8단계: 스멜 수정 프롬프트 생성
2025-11-01 13:54:04,633 - main - INFO - 9단계: 스멜 수정 LLM 호출
2025-11-01 13:54:04,640 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 13:54:04,640 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-c559e7a7-bf34-416a-93f0-5c6ffaa89d29', 'json_data': {'messages': [{'role': 'user', 'content': "GitHub Actions 워크플로우의 의미론적 스멜을 수정해주세요.\n\n**현재 워크플로우 (구문 오류는 이미 수정됨):**\n```yaml\nname: Build a Branch Specific Snapshot\n\non:\n  workflow_dispatch:\n    inputs:\n      customSnap:\n        description: 'Custom Snapshot Name'\n        required: false\n        type: string\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      BUILD_EVENT: ${{ github.event_name }}\n      BRANCH_REF_NAME: ${{ github.ref.ref_name }}  # 수정: github.ref_name -> github.ref.ref_name\n      CUSTOM_SNAPSHOT_NAME: ${{ github.event.inputs.customSnap }}  # 수정: inputs.customSnap -> github.event.inputs.customSnap\n      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n      OSSRH_PASSWORD: ${{ secrets.OSSRH_TOKEN }}\n      SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}\n      SIGNING_KEY: ${{ secrets.SIGNING_KEY }}\n      SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}\n      COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}\n      GODEBUG: x509sha1=1\n    steps:\n      - name: Setup JDK\n        uses: actions/setup-java@v4\n        with:\n          java-version: '8'\n          distribution: 'adopt'\n      - name: Setup GO\n        uses: actions/setup-go@v4\n        with:\n          go-version: '1.21.4'\n      - name: Install Nats Server\n        run: |\n          cd $GITHUB_WORKSPACE\n          git clone https://github.com/nats-io/nats-server.git\n          cd nats-server\n          go get\n          go build main.go\n          mkdir -p ~/.local/bin\n          cp main ~/.local/bin/nats-server\n          cd ..\n          rm -rf nats-server\n          nats-server -v\n      - name: Check out code\n        uses: actions/checkout@v4\n      - name: Build and Test\n        run: chmod +x gradlew && ./gradlew clean test jacocoTestReport coveralls\n      - name: Verify Javadoc\n        if: ${{ success() }}\n        run: ./gradlew javadoc\n      - name: Publish Branch Snapshot\n        if: ${{ success() }}\n        run: ./gradlew -i publishToSonatype\n```\n\n**발견된 의미론적 스멜:**\n1. Avoid jobs without timeouts (line: 12)\n   세부사항: - 10. Avoid jobs without timeouts (line: 12)\n\n**수정 요청:**\n위의 의미론적 스멜을 수정하여 개선된 GitHub Actions 워크플로우를 제공해주세요.\n\n**수정 시 고려사항:**\n1. GitHub Actions의 모범 사례를 따라주세요\n2. 워크플로우의 효율성과 안전성을 개선해주세요\n3. 기존 워크플로우의 의도와 기능을 유지해주세요\n4. 모든 스멜을 적절히 수정해주세요\n\n**응답 형식:**\n```yaml\n# 개선된 워크플로우\n```\n"}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 13:54:04,641 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 13:54:04,641 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 13:54:04,647 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1103a6a80>
2025-11-01 13:54:04,647 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x107492350> server_hostname='api.openai.com' timeout=60
2025-11-01 13:54:04,656 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1103a65d0>
2025-11-01 13:54:04,656 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 13:54:04,657 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 13:54:04,657 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 13:54:04,657 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 13:54:04,657 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 13:54:14,823 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 04:54:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'9801'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'9830'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199353'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'194ms'), (b'x-request-id', b'req_db7520c1aab0443a9a72d208c05e6466'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=mQby.RCcYUKdmvCm5CTVRROlWeyv9xXFPSP2ejrHoFs-1761972854-1.0.1.1-nlX1Pp77ZR2wRoIys79rR.KptSNNubwUkxZF1O3Ua0H_.6WGmU37ZkWc4iLWxQn2rUJj6hlq_DDNPyENKdrZLTaJN0VCNT1OzkXyObmJp4s; path=/; expires=Sat, 01-Nov-25 05:24:14 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=a_qUiu3CcNpKuM7Nd3HWBcpG3nOsxT7q4IYzi4NfTso-1761972854887-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9978cac78a8eea1b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 13:54:14,824 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 13:54:14,825 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 13:54:14,831 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 13:54:14,832 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 13:54:14,832 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 13:54:14,832 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 04:54:14 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '9801'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '9830'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199353'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '194ms'), ('x-request-id', 'req_db7520c1aab0443a9a72d208c05e6466'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=mQby.RCcYUKdmvCm5CTVRROlWeyv9xXFPSP2ejrHoFs-1761972854-1.0.1.1-nlX1Pp77ZR2wRoIys79rR.KptSNNubwUkxZF1O3Ua0H_.6WGmU37ZkWc4iLWxQn2rUJj6hlq_DDNPyENKdrZLTaJN0VCNT1OzkXyObmJp4s; path=/; expires=Sat, 01-Nov-25 05:24:14 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=a_qUiu3CcNpKuM7Nd3HWBcpG3nOsxT7q4IYzi4NfTso-1761972854887-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '9978cac78a8eea1b-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 13:54:14,832 - openai._base_client - DEBUG - request_id: req_db7520c1aab0443a9a72d208c05e6466
2025-11-01 13:54:14,833 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 13:54:14,833 - main - INFO - 10단계: 최종 수정된 YAML 추출
2025-11-01 13:54:14,834 - main - INFO - Phase 2 완료, 최종 YAML 크기: 1764 문자
2025-11-01 13:54:14,834 - main - DEBUG - 임시 파일 삭제: data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_temp_phase1.yml
2025-11-01 13:54:14,834 - main - INFO - 11단계: 최종 결과 검증 및 저장
2025-11-01 13:54:14,846 - utils.yaml_parser - DEBUG - 파싱된 YAML 객체: {'name': 'Build a Branch Specific Snapshot', 'on': {'workflow_dispatch': {'inputs': {'customSnap': {'description': 'Custom Snapshot Name', 'required': False, 'type': 'string'}}}}, 'jobs': {'build': {'runs-on': 'ubuntu-latest', 'timeout-minutes': 30, 'env': {'BUILD_EVENT': '${{ github.event_name }}', 'BRANCH_REF_NAME': '${{ github.ref.ref_name }}', 'CUSTOM_SNAPSHOT_NAME': '${{ github.event.inputs.customSnap }}', 'OSSRH_USERNAME': '${{ secrets.OSSRH_USERNAME }}', 'OSSRH_PASSWORD': '${{ secrets.OSSRH_TOKEN }}', 'SIGNING_KEY_ID': '${{ secrets.SIGNING_KEY_ID }}', 'SIGNING_KEY': '${{ secrets.SIGNING_KEY }}', 'SIGNING_PASSWORD': '${{ secrets.SIGNING_PASSWORD }}', 'COVERALLS_REPO_TOKEN': '${{ secrets.COVERALLS_REPO_TOKEN }}', 'GODEBUG': 'x509sha1=1'}, 'steps': [{'name': 'Setup JDK', 'uses': 'actions/setup-java@v4', 'with': {'java-version': '8', 'distribution': 'adopt'}}, {'name': 'Setup GO', 'uses': 'actions/setup-go@v4', 'with': {'go-version': '1.21.4'}}, {'name': 'Install Nats Server', 'run': 'cd $GITHUB_WORKSPACE\ngit clone https://github.com/nats-io/nats-server.git\ncd nats-server\ngo get\ngo build main.go\nmkdir -p ~/.local/bin\ncp main ~/.local/bin/nats-server\ncd ..\nrm -rf nats-server\nnats-server -v\n'}, {'name': 'Check out code', 'uses': 'actions/checkout@v4'}, {'name': 'Build and Test', 'run': 'chmod +x gradlew && ./gradlew clean test jacocoTestReport coveralls'}, {'name': 'Verify Javadoc', 'if': '${{ success() }}', 'run': './gradlew javadoc'}, {'name': 'Publish Branch Snapshot', 'if': '${{ success() }}', 'run': './gradlew -i publishToSonatype'}]}}}
2025-11-01 13:54:14,846 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_repair_two_phase/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_two_phase_repaired.yml
2025-11-01 13:54:14,846 - main - INFO - 2단계 모드 복구 완료
2025-11-01 13:54:14,846 - main - INFO - 최종 수정된 파일: data_repair_two_phase/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_two_phase_repaired.yml
2025-11-01 13:54:14,846 - __main__ - INFO - === 파일 3/5 2단계 복구 완료 ===
2025-11-01 13:54:14,846 - __main__ - INFO - ✅ 성공 (23.07초): a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775 -> a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_two_phase_repaired.yml
2025-11-01 13:54:14,847 - __main__ - INFO - [4/5] 처리 중: 403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3
2025-11-01 13:54:14,847 - __main__ - INFO - 입력 파일 경로: data_original/403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3
2025-11-01 13:54:14,847 - __main__ - INFO - 출력 파일 경로: data_repair_two_phase/403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3_two_phase_repaired.yml
2025-11-01 13:54:14,847 - __main__ - INFO - === 파일 4/5 2단계 복구 시작 ===
2025-11-01 13:54:14,847 - main - INFO - === 2단계 모드 시작 ===
2025-11-01 13:54:14,847 - main - INFO - 1단계: 입력 파일 읽기
2025-11-01 13:54:14,848 - utils.yaml_parser - DEBUG - YAML 파일 읽기 완료: data_original/403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3
2025-11-01 13:54:14,848 - main - INFO - 파일 크기: 1457 문자
2025-11-01 13:54:14,848 - main - INFO - === Phase 1: 구문 오류 수정 ===
2025-11-01 13:54:14,848 - main - INFO - 2단계: actionlint 구문 검사
2025-11-01 13:54:14,848 - utils.process_runner - INFO - actionlint 바이너리 발견: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac
2025-11-01 13:54:14,848 - utils.process_runner - INFO - 명령어 실행: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac -format '{{json .}}' data_original/403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3
2025-11-01 13:54:14,871 - utils.process_runner - WARNING - 명령어 실행 실패 (코드: 1, 시간: 0.02초)
2025-11-01 13:54:14,872 - utils.process_runner - INFO - actionlint 실행 완료: 오류 발견됨 (코드: 1)
2025-11-01 13:54:14,872 - main - INFO - actionlint에서 1개 오류 발견 (syntax-check 및 expression만)
2025-11-01 13:54:14,872 - main - INFO - actionlint 오류 1개 발견
2025-11-01 13:54:14,872 - main - INFO -   오류 1: could not parse as YAML: yaml: line 49: found a tab character where an indentation space is expected
2025-11-01 13:54:14,872 - main - INFO - 3단계: 구문 오류 수정 프롬프트 생성
2025-11-01 13:54:14,872 - main - INFO - 4단계: 구문 오류 수정 LLM 호출
2025-11-01 13:54:14,879 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 13:54:14,880 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-0deaa802-b356-43d0-a783-15e3ce0581fb', 'json_data': {'messages': [{'role': 'user', 'content': 'GitHub Actions 워크플로우의 구문 오류를 수정해주세요.\n\n**원본 워크플로우:**\n```yaml\n# This workflow will build a Java project with Maven and deploy snapshot\n# artifacts to Maven Central\n#\n# This job is triggered by a completed run of the "CI Build" action.\n# The "build" job only runs if the "CI Build" action completed successfully.\n# The deployed artifacts will be built from the same commit that the "CI Build" action used.\n#\nname: Deploy to Maven Central\n\non:\n  workflow_run:\n    workflows: ["CI Build"]\n    branches: [ master, v20.12, v14.1.1.0 ]\n    types:\n    - completed\n\nenv:\n  MAVEN_OPTS: "-Dmaven.wagon.httpconnectionManager.ttlSeconds=25 -Dmaven.wagon.http.retryHandler.count=3"\n\njobs:\n  build:\n    if: ${{ github.event.workflow_run.conclusion == \'success\' }}\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n      with:\n        fetch-depth: 0\n\n    - name: Set up Java 11\n      uses: actions/setup-java@v1\n      with:\n        java-version: 11\n\n    - name: Cache Maven packages\n      uses: actions/cache@v1\n      with:\n        path: ~/.m2\n        key: ${{ runner.os }}-m2-${{ hashFiles(\'**/pom.xml\') }}\n        restore-keys: ${{ runner.os }}-m2\n\n    - name: Build with Maven\n      env:\n        MAVEN_USER: ${{ secrets.MavenUser }}\n        MAVEN_PASSWORD: ${{ secrets.MavenPassword }}\n        GIT_COMMIT: ${{github.event.workflow_run.head_commit.id}}\n        HEAD_BRANCH: ${{github.event.workflow_run.head_branch}}\n      run: |\n\t\tgit checkout "${GIT_COMMIT}"\t    \n\t    sh tools/bin/github-deploy-snapshot.sh\n\n```\n\n**발견된 구문 오류:**\n1. could not parse as YAML: yaml: line 49: found a tab character where an indentation space is expected\n   라인 49\n\n**수정 요청:**\n위의 구문 오류를 수정한 완전한 GitHub Actions 워크플로우를 제공해주세요.\n\n**수정 시 고려사항:**\n1. GitHub Actions의 올바른 문법을 따라주세요\n2. 기존 워크플로우의 의도와 기능을 유지해주세요\n3. 모든 구문 오류를 적절히 수정해주세요\n\n**응답 형식:**\n```yaml\n# 수정된 워크플로우\n```\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 13:54:14,880 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 13:54:14,880 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 13:54:14,886 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11047d7f0>
2025-11-01 13:54:14,886 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1074922b0> server_hostname='api.openai.com' timeout=60
2025-11-01 13:54:14,894 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11047da90>
2025-11-01 13:54:14,895 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 13:54:14,895 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 13:54:14,895 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 13:54:14,895 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 13:54:14,895 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 13:54:20,074 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 04:54:20 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'4174'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'4510'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199471'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'158ms'), (b'x-request-id', b'req_f09174412e584b12a224a9e7e41bb64e'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=DBJmZSxW4UHug_Ov3RdvBcNX7WlZy0hwMsvn9lgdgUU-1761972860-1.0.1.1-iGrcB85l9eX9AfnV0oIRXXG5uv.bqSuyCqajMzpTL6GJgycNsXQFpIMuGSWrvVyxDPdUEzdqvzu.SSV8cA9J6gYbB6oSnRR_FF1DvJcNCI0; path=/; expires=Sat, 01-Nov-25 05:24:20 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=6A19QLHfLxQSGFIEI4CYEr74Z8ycEXnruL__9SAmS7g-1761972860139-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9978cb078c31b2de-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 13:54:20,074 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 13:54:20,074 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 13:54:20,084 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 13:54:20,084 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 13:54:20,084 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 13:54:20,084 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 04:54:20 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '4174'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '4510'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199471'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '158ms'), ('x-request-id', 'req_f09174412e584b12a224a9e7e41bb64e'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=DBJmZSxW4UHug_Ov3RdvBcNX7WlZy0hwMsvn9lgdgUU-1761972860-1.0.1.1-iGrcB85l9eX9AfnV0oIRXXG5uv.bqSuyCqajMzpTL6GJgycNsXQFpIMuGSWrvVyxDPdUEzdqvzu.SSV8cA9J6gYbB6oSnRR_FF1DvJcNCI0; path=/; expires=Sat, 01-Nov-25 05:24:20 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=6A19QLHfLxQSGFIEI4CYEr74Z8ycEXnruL__9SAmS7g-1761972860139-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '9978cb078c31b2de-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 13:54:20,084 - openai._base_client - DEBUG - request_id: req_f09174412e584b12a224a9e7e41bb64e
2025-11-01 13:54:20,085 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 13:54:20,085 - main - INFO - 5단계: 구문 수정된 YAML 추출
2025-11-01 13:54:20,085 - main - INFO - Phase 1 완료, 수정된 YAML 크기: 1510 문자
2025-11-01 13:54:20,085 - main - INFO - === Phase 2: 스멜 수정 ===
2025-11-01 13:54:20,085 - main - INFO - 6단계: 임시 파일 생성 및 스멜 검사
2025-11-01 13:54:20,086 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_original/403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3_temp_phase1.yml
2025-11-01 13:54:20,086 - main - INFO - 7단계: smell detection 실행
2025-11-01 13:54:20,086 - utils.process_runner - INFO - 명령어 실행: cd /Users/nam/Desktop/repository/Catching-Smells/RQ3/gha-ci-detector_paper/src && /Users/nam/Desktop/repository/Catching-Smells/.venv/bin/python -m gha_ci_detector file /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3_temp_phase1.yml
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 명령어 실행 성공 (0.47초)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - Smell detector stdout: Welcome to GHA CI Detector
Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3_temp_phase1.yml
We have found 13 smells
	- 3. Use fixed version for runs-on argument (line 23)
	- 6. Define permissions for workflows with external actions (job at line: 21)
	- 8. Use commit hash instead of tags for action versions (line 31)
	- 8. Use commit hash instead of tags for action versions (line 36)
	- 8. Use commit hash instead of tags for action versions (line 26)
	- 9. Steps should only perform a single command (line -1)
	- 10. Avoid jobs without timeouts (line: 21)
	- 13. Use names for run steps (lines -1:27)
	- 14. Avoid incorrectly formatted workflows
	- 19. Run tests on multiple OS's (job: build)
	- 20. Run CI on multiple language versions (job: build)
	- 21. Use cache parameter instead of cache option
	- 22. Avoid deploying jobs on forks
The following styling errors were found: 
13:16: too many spaces inside brackets (brackets)
13:42: too many spaces inside brackets (brackets)
51:49: no new line character at the end of file (new-line-at-end-of-file)

2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - Smell detector stderr: 
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - Smell detector return code: 0
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - Smell detector 출력 라인 수: 20
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 0: Welcome to GHA CI Detector
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Welcome to GHA CI Detector
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 1: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3_temp_phase1.yml
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3_temp_phase1.yml
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 2: We have found 13 smells
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: We have found 13 smells
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 3: - 3. Use fixed version for runs-on argument (line 23)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#3): Use fixed version for runs-on argument (line 23)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 4: - 6. Define permissions for workflows with external actions (job at line: 21)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 21)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 5: - 8. Use commit hash instead of tags for action versions (line 31)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 31)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 6: - 8. Use commit hash instead of tags for action versions (line 36)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 36)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 7: - 8. Use commit hash instead of tags for action versions (line 26)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 26)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 8: - 9. Steps should only perform a single command (line -1)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#9): Steps should only perform a single command (line -1)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 9: - 10. Avoid jobs without timeouts (line: 21)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 21)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 10: - 13. Use names for run steps (lines -1:27)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#13): Use names for run steps (lines -1:27)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 11: - 14. Avoid incorrectly formatted workflows
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#14): Avoid incorrectly formatted workflows
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 12: - 19. Run tests on multiple OS's (job: build)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#19): Run tests on multiple OS's (job: build)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 13: - 20. Run CI on multiple language versions (job: build)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#20): Run CI on multiple language versions (job: build)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 14: - 21. Use cache parameter instead of cache option
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#21): Use cache parameter instead of cache option
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 15: - 22. Avoid deploying jobs on forks
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#22): Avoid deploying jobs on forks
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 16: The following styling errors were found:
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: The following styling errors were found:
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 17: 13:16: too many spaces inside brackets (brackets)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 18: 13:42: too many spaces inside brackets (brackets)
2025-11-01 13:54:20,554 - utils.process_runner - DEBUG - 라인 19: 51:49: no new line character at the end of file (new-line-at-end-of-file)
2025-11-01 13:54:20,554 - utils.process_runner - INFO - 총 1개 대상 스멜 파싱됨 (1,4,5,10,11,15,16번만)
2025-11-01 13:54:20,554 - utils.process_runner - INFO - Smell detector 실행 완료: 1개 스멜 발견
2025-11-01 13:54:20,554 - main - INFO - 스멜 1개 발견
2025-11-01 13:54:20,554 - main - INFO -   스멜 1: Avoid jobs without timeouts (line: 21)
2025-11-01 13:54:20,554 - main - INFO - 8단계: 스멜 수정 프롬프트 생성
2025-11-01 13:54:20,554 - main - INFO - 9단계: 스멜 수정 LLM 호출
2025-11-01 13:54:20,561 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 13:54:20,562 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-e595a20e-f46e-45af-8def-fb748a8a00fd', 'json_data': {'messages': [{'role': 'user', 'content': 'GitHub Actions 워크플로우의 의미론적 스멜을 수정해주세요.\n\n**현재 워크플로우 (구문 오류는 이미 수정됨):**\n```yaml\n# This workflow will build a Java project with Maven and deploy snapshot\n# artifacts to Maven Central\n#\n# This job is triggered by a completed run of the "CI Build" action.\n# The "build" job only runs if the "CI Build" action completed successfully.\n# The deployed artifacts will be built from the same commit that the "CI Build" action used.\n#\nname: Deploy to Maven Central\n\non:\n  workflow_run:\n    workflows: ["CI Build"]\n    branches: [ master, v20.12, v14.1.1.0 ]\n    types:\n      - completed\n\nenv:\n  MAVEN_OPTS: "-Dmaven.wagon.httpconnectionManager.ttlSeconds=25 -Dmaven.wagon.http.retryHandler.count=3"\n\njobs:\n  build:\n    if: ${{ github.event.workflow_run.conclusion == \'success\' }}\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Set up Java 11\n        uses: actions/setup-java@v1\n        with:\n          java-version: 11\n\n      - name: Cache Maven packages\n        uses: actions/cache@v1\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-m2-${{ hashFiles(\'**/pom.xml\') }}\n          restore-keys: ${{ runner.os }}-m2\n\n      - name: Build with Maven\n        env:\n          MAVEN_USER: ${{ secrets.MavenUser }}\n          MAVEN_PASSWORD: ${{ secrets.MavenPassword }}\n          GIT_COMMIT: ${{ github.event.workflow_run.head_commit.id }}\n          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}\n        run: |\n          git checkout "${GIT_COMMIT}"\n          sh tools/bin/github-deploy-snapshot.sh\n```\n\n**발견된 의미론적 스멜:**\n1. Avoid jobs without timeouts (line: 21)\n   세부사항: - 10. Avoid jobs without timeouts (line: 21)\n\n**수정 요청:**\n위의 의미론적 스멜을 수정하여 개선된 GitHub Actions 워크플로우를 제공해주세요.\n\n**수정 시 고려사항:**\n1. GitHub Actions의 모범 사례를 따라주세요\n2. 워크플로우의 효율성과 안전성을 개선해주세요\n3. 기존 워크플로우의 의도와 기능을 유지해주세요\n4. 모든 스멜을 적절히 수정해주세요\n\n**응답 형식:**\n```yaml\n# 개선된 워크플로우\n```\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 13:54:20,562 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 13:54:20,562 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 13:54:20,568 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11048cd50>
2025-11-01 13:54:20,568 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1074923f0> server_hostname='api.openai.com' timeout=60
2025-11-01 13:54:20,577 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1104c84d0>
2025-11-01 13:54:20,577 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 13:54:20,577 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 13:54:20,577 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 13:54:20,577 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 13:54:20,577 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 13:54:31,527 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 04:54:31 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'10739'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'10769'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'199433'), (b'x-ratelimit-reset-requests', b'12.388s'), (b'x-ratelimit-reset-tokens', b'170ms'), (b'x-request-id', b'req_d21e2f7136fc44e08e14ea5603955de9'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=EgnwuHvAJXauNqxhIM4JYtaAk84JFFHe1iSfUcTsiDw-1761972871-1.0.1.1-KGYZgwV93.ZGN1f1QRp0ywf5s6flSdcTvRK7oNvGDAcjvhGLWilNzD5mVnVLsMhd2EMPJBZTRUOA5HF2wJsi.MuFFgnK3rfbdTMUeOIFmOY; path=/; expires=Sat, 01-Nov-25 05:24:31 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=7OGX04vcxzNo5J7KQf8hVxiUwgXciNVojbPcXmejcVs-1761972871591-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9978cb2b0f9621d8-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 13:54:31,528 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 13:54:31,528 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 13:54:31,530 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 13:54:31,530 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 13:54:31,530 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 13:54:31,530 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 04:54:31 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '10739'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '10769'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9998'), ('x-ratelimit-remaining-tokens', '199433'), ('x-ratelimit-reset-requests', '12.388s'), ('x-ratelimit-reset-tokens', '170ms'), ('x-request-id', 'req_d21e2f7136fc44e08e14ea5603955de9'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=EgnwuHvAJXauNqxhIM4JYtaAk84JFFHe1iSfUcTsiDw-1761972871-1.0.1.1-KGYZgwV93.ZGN1f1QRp0ywf5s6flSdcTvRK7oNvGDAcjvhGLWilNzD5mVnVLsMhd2EMPJBZTRUOA5HF2wJsi.MuFFgnK3rfbdTMUeOIFmOY; path=/; expires=Sat, 01-Nov-25 05:24:31 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=7OGX04vcxzNo5J7KQf8hVxiUwgXciNVojbPcXmejcVs-1761972871591-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '9978cb2b0f9621d8-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 13:54:31,530 - openai._base_client - DEBUG - request_id: req_d21e2f7136fc44e08e14ea5603955de9
2025-11-01 13:54:31,531 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 13:54:31,531 - main - INFO - 10단계: 최종 수정된 YAML 추출
2025-11-01 13:54:31,531 - main - INFO - Phase 2 완료, 최종 YAML 크기: 1560 문자
2025-11-01 13:54:31,532 - main - DEBUG - 임시 파일 삭제: data_original/403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3_temp_phase1.yml
2025-11-01 13:54:31,532 - main - INFO - 11단계: 최종 결과 검증 및 저장
2025-11-01 13:54:31,535 - utils.yaml_parser - DEBUG - 파싱된 YAML 객체: {'name': 'Deploy to Maven Central', 'on': {'workflow_run': {'workflows': ['CI Build'], 'branches': ['master', 'v20.12', 'v14.1.1.0'], 'types': ['completed']}}, 'env': {'MAVEN_OPTS': '-Dmaven.wagon.httpconnectionManager.ttlSeconds=25 -Dmaven.wagon.http.retryHandler.count=3'}, 'jobs': {'build': {'if': "${{ github.event.workflow_run.conclusion == 'success' }}", 'runs-on': 'ubuntu-latest', 'timeout-minutes': 30, 'steps': [{'uses': 'actions/checkout@v2', 'with': {'fetch-depth': 0}}, {'name': 'Set up Java 11', 'uses': 'actions/setup-java@v1', 'with': {'java-version': 11}}, {'name': 'Cache Maven packages', 'uses': 'actions/cache@v1', 'with': {'path': '~/.m2', 'key': "${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}", 'restore-keys': '${{ runner.os }}-m2'}}, {'name': 'Build with Maven', 'env': {'MAVEN_USER': '${{ secrets.MavenUser }}', 'MAVEN_PASSWORD': '${{ secrets.MavenPassword }}', 'GIT_COMMIT': '${{ github.event.workflow_run.head_commit.id }}', 'HEAD_BRANCH': '${{ github.event.workflow_run.head_branch }}'}, 'run': 'git checkout "${GIT_COMMIT}"\nsh tools/bin/github-deploy-snapshot.sh'}]}}}
2025-11-01 13:54:31,535 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_repair_two_phase/403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3_two_phase_repaired.yml
2025-11-01 13:54:31,535 - main - INFO - 2단계 모드 복구 완료
2025-11-01 13:54:31,535 - main - INFO - 최종 수정된 파일: data_repair_two_phase/403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3_two_phase_repaired.yml
2025-11-01 13:54:31,535 - __main__ - INFO - === 파일 4/5 2단계 복구 완료 ===
2025-11-01 13:54:31,535 - __main__ - INFO - ✅ 성공 (16.69초): 403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3 -> 403e061e7d455aee0ef3748155dbfc98aed8796c74818d68e3ac0a6bd75a9df3_two_phase_repaired.yml
2025-11-01 13:54:31,535 - __main__ - INFO - [5/5] 처리 중: ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449
2025-11-01 13:54:31,535 - __main__ - INFO - 입력 파일 경로: data_original/ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449
2025-11-01 13:54:31,536 - __main__ - INFO - 출력 파일 경로: data_repair_two_phase/ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449_two_phase_repaired.yml
2025-11-01 13:54:31,536 - __main__ - INFO - === 파일 5/5 2단계 복구 시작 ===
2025-11-01 13:54:31,536 - main - INFO - === 2단계 모드 시작 ===
2025-11-01 13:54:31,536 - main - INFO - 1단계: 입력 파일 읽기
2025-11-01 13:54:31,536 - utils.yaml_parser - DEBUG - YAML 파일 읽기 완료: data_original/ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449
2025-11-01 13:54:31,536 - main - INFO - 파일 크기: 5175 문자
2025-11-01 13:54:31,536 - main - INFO - === Phase 1: 구문 오류 수정 ===
2025-11-01 13:54:31,536 - main - INFO - 2단계: actionlint 구문 검사
2025-11-01 13:54:31,536 - utils.process_runner - INFO - actionlint 바이너리 발견: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac
2025-11-01 13:54:31,536 - utils.process_runner - INFO - 명령어 실행: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac -format '{{json .}}' data_original/ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449
2025-11-01 13:54:31,556 - utils.process_runner - WARNING - 명령어 실행 실패 (코드: 1, 시간: 0.02초)
2025-11-01 13:54:31,556 - utils.process_runner - INFO - actionlint 실행 완료: 오류 발견됨 (코드: 1)
2025-11-01 13:54:31,556 - main - INFO - actionlint에서 1개 오류 발견 (syntax-check 및 expression만)
2025-11-01 13:54:31,556 - main - INFO - actionlint 오류 1개 발견
2025-11-01 13:54:31,556 - main - INFO -   오류 1: could not parse as YAML: yaml: line 17: mapping values are not allowed in this context
2025-11-01 13:54:31,556 - main - INFO - 3단계: 구문 오류 수정 프롬프트 생성
2025-11-01 13:54:31,556 - main - INFO - 4단계: 구문 오류 수정 LLM 호출
2025-11-01 13:54:31,564 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 13:54:31,565 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-28faf055-8ebb-45eb-b8e3-61c761ef212d', 'json_data': {'messages': [{'role': 'user', 'content': "GitHub Actions 워크플로우의 구문 오류를 수정해주세요.\n\n**원본 워크플로우:**\n```yaml\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\n\nname: Upload Release Asset\n\njobs:\n\n  build-linux:\n    name: Build ESBMC with all Solvers (Linux)\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Configure CMake\n        run: mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -GNinja -DDOWNLOAD_DEPENDENCIES=On -DBUILD_STATIC=On -DBoolector_DIR=/workspace/boolector-release -DZ3_DIR=/workspace/z3 -DENABLE_JIMPLE_FRONTEND=On -DENABLE_SOLIDITY_FRONTEND=On\n      - name: Build ESBMC\n        run: cd build && cmake --build . && cpack && mv ESBMC-*.sh ESBMC-Linux.sh\n      - uses: actions/upload-artifact@v1\n        with:\n          name: release-linux\n          path: ./build/ESBMC-Linux.sh\n\n\n  build-macos:\n    name: Build Darwin Release\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install Dependencies\n        run: brew install gmp csmith cmake boost ninja python3 automake bison flex && pip3 install PySMT toml\n      - name: Download Clang 11\n        run: wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang+llvm-11.0.0-x86_64-apple-darwin.tar.xz\n      - name: Extract Clang 11\n        run: tar xf clang+llvm-11.0.0-x86_64-apple-darwin.tar.xz && mv clang+llvm-11.0.0-x86_64-apple-darwin clang\n      - name: Setup boolector\n        run: git clone --depth=1 --branch=3.2.2 https://github.com/boolector/boolector && cd boolector && ./contrib/setup-lingeling.sh && ./contrib/setup-btor2tools.sh && ./configure.sh --prefix $PWD/../boolector-release && cd build && make -j4 && make install\n      - name: Setup Z3\n        run: brew install z3\n      - name: Get current folder and files\n        run: pwd && ls\n      - name: Configure CMake\n        run: mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -GNinja -DClang_DIR=$PWD/../clang -DLLVM_DIR=$PWD/../clang -DBoolector_DIR=$PWD/../boolector-release -DZ3_DIR=$PWD/../z3 -DC2GOTO_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -DENABLE_SOLIDITY_FRONTEND=On -DBUILD_STATIC=Off -DENABLE_JIMPLE_FRONTEND=On\n      - name: Build ESBMC\n        run: cd build && cmake --build . && cpack && mv ESBMC-*.sh ESBMC-Darwin.sh\n      - uses: actions/upload-artifact@v1\n        with:\n          name: release-darwin\n          path: ./build/ESBMC-Darwin.sh\n\n  build-windows:\n    name: Build ESBMC with Z3 (Windows)\n    runs-on: windows-latest\n    steps:\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: 3.8\n    - name: check python\n      run: python --version\n    - name: Update vcpkg\n      run: |\n        vcpkg.exe update\n        cd C:/vcpkg\n        git.exe pull\n        .\\bootstrap-vcpkg.bat\n    - name: Configure ESBMC\n      run: ./scripts/build.ps1\n    - uses: actions/upload-artifact@v2\n      with:\n        name: release-windows\n        path: C:/deps/esbmc\n\n\n  create-release:\n    name: Upload Release Asset\n    runs-on: ubuntu-20.04\n    needs: [build-linux, build-macos, build-windows]\n    steps:\n      - name: Download Linux Build\n        uses: actions/download-artifact@v1\n        with:\n          name: release-linux\n          path: ./\n      - name: Download Macos Build\n        uses: actions/download-artifact@v1\n        with:\n          name: release-darwin\n          path: ./\n      - name: Download Windows Build\n        uses: actions/download-artifact@v1\n        with:\n          name: release-windows\n          path: ./\n      - name: Get files\n        run: ls\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1.0.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n      - name: Upload Release Asset (Linux)\n        id: upload-release-asset-linux\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./ESBMC-Linux.sh\n          asset_name: ESBMC-Linux.sh\n          asset_content_type: text/x-shellscript\n      - name: Upload Release Asset (Darwin)\n        id: upload-release-asset-macos\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./ESBMC-Darwin.sh\n          asset_name: ESBMC-Darwin.sh\n          asset_content_type: text/x-shellscript\n      - name: Upload Release Asset (Windows)\n        id: upload-release-asset-windows\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./ESBMC-Windows.zip\n          asset_name: ESBMC-Windows.zip\n          asset_content_type: application/zip\n\n```\n\n**발견된 구문 오류:**\n1. could not parse as YAML: yaml: line 17: mapping values are not allowed in this context\n   라인 17\n\n**수정 요청:**\n위의 구문 오류를 수정한 완전한 GitHub Actions 워크플로우를 제공해주세요.\n\n**수정 시 고려사항:**\n1. GitHub Actions의 올바른 문법을 따라주세요\n2. 기존 워크플로우의 의도와 기능을 유지해주세요\n3. 모든 구문 오류를 적절히 수정해주세요\n\n**응답 형식:**\n```yaml\n# 수정된 워크플로우\n```\n"}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 13:54:31,565 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 13:54:31,565 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 13:54:31,572 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1104c8890>
2025-11-01 13:54:31,572 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x107492490> server_hostname='api.openai.com' timeout=60
2025-11-01 13:54:31,580 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11038aaf0>
2025-11-01 13:54:31,580 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 13:54:31,581 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 13:54:31,581 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 13:54:31,581 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 13:54:31,581 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 13:54:48,908 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 04:54:48 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'16370'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'16679'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9998'), (b'x-ratelimit-remaining-tokens', b'198545'), (b'x-ratelimit-reset-requests', b'9.273s'), (b'x-ratelimit-reset-tokens', b'436ms'), (b'x-request-id', b'req_414761199d9643c39f9c4dbf7b9a74da'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=pYopIRnZun8rIVgZF9QOlGcev90J_vxaFbbnHjdV4YY-1761972888-1.0.1.1-F_T_mAJ5mmzoEPwIXPcZMT9AJJRGfWEa2h5cK2Hl8ON48nZoH_.37jM9ZWIIhajyY50Cx1ZTL47YsSvECWNpbTK4a8OmA86I0.k74cnIdnw; path=/; expires=Sat, 01-Nov-25 05:24:48 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=Gd0MYaONHOHYzwmg9qappD8C0JDZxoBQfvVplc9pveo-1761972888971-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9978cb6fd80ae9f8-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 13:54:48,911 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 13:54:48,911 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 13:54:48,917 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 13:54:48,918 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 13:54:48,918 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 13:54:48,918 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 04:54:48 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '16370'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '16679'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9998'), ('x-ratelimit-remaining-tokens', '198545'), ('x-ratelimit-reset-requests', '9.273s'), ('x-ratelimit-reset-tokens', '436ms'), ('x-request-id', 'req_414761199d9643c39f9c4dbf7b9a74da'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=pYopIRnZun8rIVgZF9QOlGcev90J_vxaFbbnHjdV4YY-1761972888-1.0.1.1-F_T_mAJ5mmzoEPwIXPcZMT9AJJRGfWEa2h5cK2Hl8ON48nZoH_.37jM9ZWIIhajyY50Cx1ZTL47YsSvECWNpbTK4a8OmA86I0.k74cnIdnw; path=/; expires=Sat, 01-Nov-25 05:24:48 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=Gd0MYaONHOHYzwmg9qappD8C0JDZxoBQfvVplc9pveo-1761972888971-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '9978cb6fd80ae9f8-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 13:54:48,918 - openai._base_client - DEBUG - request_id: req_414761199d9643c39f9c4dbf7b9a74da
2025-11-01 13:54:48,920 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 13:54:48,920 - main - INFO - 5단계: 구문 수정된 YAML 추출
2025-11-01 13:54:48,920 - main - INFO - Phase 1 완료, 수정된 YAML 크기: 5214 문자
2025-11-01 13:54:48,920 - main - INFO - === Phase 2: 스멜 수정 ===
2025-11-01 13:54:48,920 - main - INFO - 6단계: 임시 파일 생성 및 스멜 검사
2025-11-01 13:54:48,922 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_original/ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449_temp_phase1.yml
2025-11-01 13:54:48,922 - main - INFO - 7단계: smell detection 실행
2025-11-01 13:54:48,922 - utils.process_runner - INFO - 명령어 실행: cd /Users/nam/Desktop/repository/Catching-Smells/RQ3/gha-ci-detector_paper/src && /Users/nam/Desktop/repository/Catching-Smells/.venv/bin/python -m gha_ci_detector file /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449_temp_phase1.yml
2025-11-01 13:54:49,483 - utils.process_runner - DEBUG - 명령어 실행 성공 (0.56초)
2025-11-01 13:54:49,483 - utils.process_runner - DEBUG - Smell detector stdout: Welcome to GHA CI Detector
Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449_temp_phase1.yml
We have found 34 smells
	- 2. Prevent running issue/PR actions on forks line 36:37
	- 3. Use fixed version for runs-on argument (line 52)
	- 3. Use fixed version for runs-on argument (line 26)
	- 3. Use fixed version for runs-on argument (line 12)
	- 4. Stop running workflows when there is a newer commit in branch
	- 6. Define permissions for workflows with external actions (job at line: 25)
	- 6. Define permissions for workflows with external actions (job at line: 11)
	- 6. Define permissions for workflows with external actions (job at line: 51)
	- 6. Define permissions for workflows with external actions (job at line: 74)
	- 7. Use 'if' for upload-artifact action (line 69)
	- 7. Use 'if' for upload-artifact action (line 20)
	- 8. Use commit hash instead of tags for action versions (line 55)
	- 8. Use commit hash instead of tags for action versions (line 68)
	- 8. Use commit hash instead of tags for action versions (line 107)
	- 8. Use commit hash instead of tags for action versions (line 19)
	- 8. Use commit hash instead of tags for action versions (line 79)
	- 8. Use commit hash instead of tags for action versions (line 14)
	- 8. Use commit hash instead of tags for action versions (line 97)
	- 9. Steps should only perform a single command (line -1)
	- 10. Avoid jobs without timeouts (line: 74)
	- 10. Avoid jobs without timeouts (line: 11)
	- 10. Avoid jobs without timeouts (line: 51)
	- 10. Avoid jobs without timeouts (line: 25)
	- 13. Use names for run steps (lines -1:69)
	- 13. Use names for run steps (lines 15:15)
	- 13. Use names for run steps (lines -1:20)
	- 14. Avoid incorrectly formatted workflows
	- 15. Use permissions whenever using Github Token (job at line 74)
	- 16. Avoid running CI related actions when no source code has changed
	- 18. Avoid installing packages without version (line -1)
	- 19. Run tests on multiple OS's (job: build-macos)
	- 19. Run tests on multiple OS's (job: build-linux)
	- 19. Run tests on multiple OS's (job: build-windows)
	- 22. Avoid deploying jobs on forks
The following styling errors were found: 
5:14: too few spaces before comment: expected 2 (comments)
135:46: no new line character at the end of file (new-line-at-end-of-file)

2025-11-01 13:54:49,483 - utils.process_runner - DEBUG - Smell detector stderr: 
2025-11-01 13:54:49,483 - utils.process_runner - DEBUG - Smell detector return code: 0
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - Smell detector 출력 라인 수: 40
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 0: Welcome to GHA CI Detector
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Welcome to GHA CI Detector
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 1: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449_temp_phase1.yml
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449_temp_phase1.yml
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 2: We have found 34 smells
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: We have found 34 smells
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 3: - 2. Prevent running issue/PR actions on forks line 36:37
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#2): Prevent running issue/PR actions on forks line 36:37
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 4: - 3. Use fixed version for runs-on argument (line 52)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#3): Use fixed version for runs-on argument (line 52)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 5: - 3. Use fixed version for runs-on argument (line 26)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#3): Use fixed version for runs-on argument (line 26)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 6: - 3. Use fixed version for runs-on argument (line 12)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#3): Use fixed version for runs-on argument (line 12)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 7: - 4. Stop running workflows when there is a newer commit in branch
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 스멜 감지 (#4): Stop running workflows when there is a newer commit in branch
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 8: - 6. Define permissions for workflows with external actions (job at line: 25)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 25)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 9: - 6. Define permissions for workflows with external actions (job at line: 11)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 11)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 10: - 6. Define permissions for workflows with external actions (job at line: 51)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 51)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 11: - 6. Define permissions for workflows with external actions (job at line: 74)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 74)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 12: - 7. Use 'if' for upload-artifact action (line 69)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#7): Use 'if' for upload-artifact action (line 69)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 13: - 7. Use 'if' for upload-artifact action (line 20)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#7): Use 'if' for upload-artifact action (line 20)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 14: - 8. Use commit hash instead of tags for action versions (line 55)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 55)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 15: - 8. Use commit hash instead of tags for action versions (line 68)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 68)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 16: - 8. Use commit hash instead of tags for action versions (line 107)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 107)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 17: - 8. Use commit hash instead of tags for action versions (line 19)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 19)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 18: - 8. Use commit hash instead of tags for action versions (line 79)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 79)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 19: - 8. Use commit hash instead of tags for action versions (line 14)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 14)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 20: - 8. Use commit hash instead of tags for action versions (line 97)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 97)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 21: - 9. Steps should only perform a single command (line -1)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#9): Steps should only perform a single command (line -1)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 22: - 10. Avoid jobs without timeouts (line: 74)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 74)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 23: - 10. Avoid jobs without timeouts (line: 11)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 11)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 24: - 10. Avoid jobs without timeouts (line: 51)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 51)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 25: - 10. Avoid jobs without timeouts (line: 25)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 25)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 26: - 13. Use names for run steps (lines -1:69)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#13): Use names for run steps (lines -1:69)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 27: - 13. Use names for run steps (lines 15:15)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#13): Use names for run steps (lines 15:15)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 28: - 13. Use names for run steps (lines -1:20)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#13): Use names for run steps (lines -1:20)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 29: - 14. Avoid incorrectly formatted workflows
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#14): Avoid incorrectly formatted workflows
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 30: - 15. Use permissions whenever using Github Token (job at line 74)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 스멜 감지 (#15): Use permissions whenever using Github Token (job at line 74)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 31: - 16. Avoid running CI related actions when no source code has changed
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 스멜 감지 (#16): Avoid running CI related actions when no source code has changed
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 32: - 18. Avoid installing packages without version (line -1)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#18): Avoid installing packages without version (line -1)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 33: - 19. Run tests on multiple OS's (job: build-macos)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#19): Run tests on multiple OS's (job: build-macos)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 34: - 19. Run tests on multiple OS's (job: build-linux)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#19): Run tests on multiple OS's (job: build-linux)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 35: - 19. Run tests on multiple OS's (job: build-windows)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#19): Run tests on multiple OS's (job: build-windows)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 36: - 22. Avoid deploying jobs on forks
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#22): Avoid deploying jobs on forks
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 37: The following styling errors were found:
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: The following styling errors were found:
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 38: 5:14: too few spaces before comment: expected 2 (comments)
2025-11-01 13:54:49,484 - utils.process_runner - DEBUG - 라인 39: 135:46: no new line character at the end of file (new-line-at-end-of-file)
2025-11-01 13:54:49,484 - utils.process_runner - INFO - 총 7개 대상 스멜 파싱됨 (1,4,5,10,11,15,16번만)
2025-11-01 13:54:49,484 - utils.process_runner - INFO - Smell detector 실행 완료: 7개 스멜 발견
2025-11-01 13:54:49,484 - main - INFO - 스멜 7개 발견
2025-11-01 13:54:49,484 - main - INFO -   스멜 1: Stop running workflows when there is a newer commit in branch
2025-11-01 13:54:49,485 - main - INFO -   스멜 2: Avoid jobs without timeouts (line: 74)
2025-11-01 13:54:49,485 - main - INFO -   스멜 3: Avoid jobs without timeouts (line: 11)
2025-11-01 13:54:49,485 - main - INFO - 8단계: 스멜 수정 프롬프트 생성
2025-11-01 13:54:49,485 - main - INFO - 9단계: 스멜 수정 LLM 호출
2025-11-01 13:54:49,492 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 13:54:49,493 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-434ee9c9-bc0d-4eb0-8f04-0305fe641190', 'json_data': {'messages': [{'role': 'user', 'content': "GitHub Actions 워크플로우의 의미론적 스멜을 수정해주세요.\n\n**현재 워크플로우 (구문 오류는 이미 수정됨):**\n```yaml\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\n\nname: Upload Release Asset\n\njobs:\n\n  build-linux:\n    name: Build ESBMC with all Solvers (Linux)\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Configure CMake\n        run: mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -GNinja -DDOWNLOAD_DEPENDENCIES=On -DBUILD_STATIC=On -DBoolector_DIR=/workspace/boolector-release -DZ3_DIR=/workspace/z3 -DENABLE_JIMPLE_FRONTEND=On -DENABLE_SOLIDITY_FRONTEND=On\n      - name: Build ESBMC\n        run: cd build && cmake --build . && cpack && mv ESBMC-*.sh ESBMC-Linux.sh\n      - uses: actions/upload-artifact@v1\n        with:\n          name: release-linux\n          path: ./build/ESBMC-Linux.sh\n\n  build-macos:\n    name: Build Darwin Release\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install Dependencies\n        run: brew install gmp csmith cmake boost ninja python3 automake bison flex && pip3 install PySMT toml\n      - name: Download Clang 11\n        run: wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang+llvm-11.0.0-x86_64-apple-darwin.tar.xz\n      - name: Extract Clang 11\n        run: tar xf clang+llvm-11.0.0-x86_64-apple-darwin.tar.xz && mv clang+llvm-11.0.0-x86_64-apple-darwin clang\n      - name: Setup boolector\n        run: git clone --depth=1 --branch=3.2.2 https://github.com/boolector/boolector && cd boolector && ./contrib/setup-lingeling.sh && ./contrib/setup-btor2tools.sh && ./configure.sh --prefix $PWD/../boolector-release && cd build && make -j4 && make install\n      - name: Setup Z3\n        run: brew install z3\n      - name: Get current folder and files\n        run: pwd && ls\n      - name: Configure CMake\n        run: mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -GNinja -DClang_DIR=$PWD/../clang -DLLVM_DIR=$PWD/../clang -DBoolector_DIR=$PWD/../boolector-release -DZ3_DIR=$PWD/../z3 -DC2GOTO_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -DENABLE_SOLIDITY_FRONTEND=On -DBUILD_STATIC=Off -DENABLE_JIMPLE_FRONTEND=On\n      - name: Build ESBMC\n        run: cd build && cmake --build . && cpack && mv ESBMC-*.sh ESBMC-Darwin.sh\n      - uses: actions/upload-artifact@v1\n        with:\n          name: release-darwin\n          path: ./build/ESBMC-Darwin.sh\n\n  build-windows:\n    name: Build ESBMC with Z3 (Windows)\n    runs-on: windows-latest\n    steps:\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.8\n      - name: check python\n        run: python --version\n      - name: Update vcpkg\n        run: |\n          vcpkg.exe update\n          cd C:/vcpkg\n          git.exe pull\n          .\\bootstrap-vcpkg.bat\n      - name: Configure ESBMC\n        run: ./scripts/build.ps1\n      - uses: actions/upload-artifact@v2\n        with:\n          name: release-windows\n          path: C:/deps/esbmc\n\n  create-release:\n    name: Upload Release Asset\n    runs-on: ubuntu-20.04\n    needs: [build-linux, build-macos, build-windows]\n    steps:\n      - name: Download Linux Build\n        uses: actions/download-artifact@v1\n        with:\n          name: release-linux\n          path: ./\n      - name: Download Macos Build\n        uses: actions/download-artifact@v1\n        with:\n          name: release-darwin\n          path: ./\n      - name: Download Windows Build\n        uses: actions/download-artifact@v1\n        with:\n          name: release-windows\n          path: ./\n      - name: Get files\n        run: ls\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1.0.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n      - name: Upload Release Asset (Linux)\n        id: upload-release-asset-linux\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./ESBMC-Linux.sh\n          asset_name: ESBMC-Linux.sh\n          asset_content_type: text/x-shellscript\n      - name: Upload Release Asset (Darwin)\n        id: upload-release-asset-macos\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./ESBMC-Darwin.sh\n          asset_name: ESBMC-Darwin.sh\n          asset_content_type: text/x-shellscript\n      - name: Upload Release Asset (Windows)\n        id: upload-release-asset-windows\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./ESBMC-Windows.zip\n          asset_name: ESBMC-Windows.zip\n          asset_content_type: application/zip\n```\n\n**발견된 의미론적 스멜:**\n1. Stop running workflows when there is a newer commit in branch\n   세부사항: - 4. Stop running workflows when there is a newer commit in branch\n2. Avoid jobs without timeouts (line: 74)\n   세부사항: - 10. Avoid jobs without timeouts (line: 74)\n3. Avoid jobs without timeouts (line: 11)\n   세부사항: - 10. Avoid jobs without timeouts (line: 11)\n4. Avoid jobs without timeouts (line: 51)\n   세부사항: - 10. Avoid jobs without timeouts (line: 51)\n5. Avoid jobs without timeouts (line: 25)\n   세부사항: - 10. Avoid jobs without timeouts (line: 25)\n6. Use permissions whenever using Github Token (job at line 74)\n   세부사항: - 15. Use permissions whenever using Github Token (job at line 74)\n7. Avoid running CI related actions when no source code has changed\n   세부사항: - 16. Avoid running CI related actions when no source code has changed\n\n**수정 요청:**\n위의 의미론적 스멜을 수정하여 개선된 GitHub Actions 워크플로우를 제공해주세요.\n\n**수정 시 고려사항:**\n1. GitHub Actions의 모범 사례를 따라주세요\n2. 워크플로우의 효율성과 안전성을 개선해주세요\n3. 기존 워크플로우의 의도와 기능을 유지해주세요\n4. 모든 스멜을 적절히 수정해주세요\n\n**응답 형식:**\n```yaml\n# 개선된 워크플로우\n```\n"}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 13:54:49,493 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 13:54:49,494 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 13:54:49,504 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11038adb0>
2025-11-01 13:54:49,504 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1074905f0> server_hostname='api.openai.com' timeout=60
2025-11-01 13:54:49,513 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x107490ff0>
2025-11-01 13:54:49,513 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 13:54:49,513 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 13:54:49,513 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 13:54:49,513 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 13:54:49,513 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 13:55:12,740 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 04:55:12 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'23011'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'23030'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'198315'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'505ms'), (b'x-request-id', b'req_9bf11bcfc6444e12b3ae426ce555c6d9'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=kPHIuQ4PHSPJeuftU_GiSFiO7JSVrVVRfZoSmIesIu0-1761972912-1.0.1.1-ibMTodbX7peofLuuLRlaEaoye_l5Fiei86ERinInJDPaVQTZFu__qUDc_2NW.b2CMwQxLvV3xWjJ1porC_sRsMDBKAXuapc2H7w2slZpQic; path=/; expires=Sat, 01-Nov-25 05:25:12 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=ByztHkIXOxYUysLbnCFmMhwy42IahZAyNbsaseopHqE-1761972912802-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9978cbdfed37aa36-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 13:55:12,741 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 13:55:12,742 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 13:55:12,743 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 13:55:12,743 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 13:55:12,743 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 13:55:12,743 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 04:55:12 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '23011'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '23030'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '198315'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '505ms'), ('x-request-id', 'req_9bf11bcfc6444e12b3ae426ce555c6d9'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=kPHIuQ4PHSPJeuftU_GiSFiO7JSVrVVRfZoSmIesIu0-1761972912-1.0.1.1-ibMTodbX7peofLuuLRlaEaoye_l5Fiei86ERinInJDPaVQTZFu__qUDc_2NW.b2CMwQxLvV3xWjJ1porC_sRsMDBKAXuapc2H7w2slZpQic; path=/; expires=Sat, 01-Nov-25 05:25:12 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=ByztHkIXOxYUysLbnCFmMhwy42IahZAyNbsaseopHqE-1761972912802-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '9978cbdfed37aa36-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 13:55:12,743 - openai._base_client - DEBUG - request_id: req_9bf11bcfc6444e12b3ae426ce555c6d9
2025-11-01 13:55:12,744 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 13:55:12,744 - main - INFO - 10단계: 최종 수정된 YAML 추출
2025-11-01 13:55:12,744 - main - INFO - Phase 2 완료, 최종 YAML 크기: 5374 문자
2025-11-01 13:55:12,745 - main - DEBUG - 임시 파일 삭제: data_original/ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449_temp_phase1.yml
2025-11-01 13:55:12,745 - main - INFO - 11단계: 최종 결과 검증 및 저장
2025-11-01 13:55:12,763 - utils.yaml_parser - DEBUG - 파싱된 YAML 객체: {'on': {'push': {'tags': ['v*'], 'branches': ['main']}}, 'name': 'Upload Release Asset', 'jobs': {'build-linux': {'name': 'Build ESBMC with all Solvers (Linux)', 'runs-on': 'ubuntu-latest', 'timeout-minutes': 30, 'steps': [{'uses': 'actions/checkout@v2'}, {'name': 'Configure CMake', 'run': 'mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -GNinja -DDOWNLOAD_DEPENDENCIES=On -DBUILD_STATIC=On -DBoolector_DIR=/workspace/boolector-release -DZ3_DIR=/workspace/z3 -DENABLE_JIMPLE_FRONTEND=On -DENABLE_SOLIDITY_FRONTEND=On'}, {'name': 'Build ESBMC', 'run': 'cd build && cmake --build . && cpack && mv ESBMC-*.sh ESBMC-Linux.sh'}, {'uses': 'actions/upload-artifact@v1', 'with': {'name': 'release-linux', 'path': './build/ESBMC-Linux.sh'}}]}, 'build-macos': {'name': 'Build Darwin Release', 'runs-on': 'macos-latest', 'timeout-minutes': 30, 'steps': [{'uses': 'actions/checkout@v2'}, {'name': 'Install Dependencies', 'run': 'brew install gmp csmith cmake boost ninja python3 automake bison flex && pip3 install PySMT toml'}, {'name': 'Download Clang 11', 'run': 'wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang+llvm-11.0.0-x86_64-apple-darwin.tar.xz'}, {'name': 'Extract Clang 11', 'run': 'tar xf clang+llvm-11.0.0-x86_64-apple-darwin.tar.xz && mv clang+llvm-11.0.0-x86_64-apple-darwin clang'}, {'name': 'Setup boolector', 'run': 'git clone --depth=1 --branch=3.2.2 https://github.com/boolector/boolector && cd boolector && ./contrib/setup-lingeling.sh && ./contrib/setup-btor2tools.sh && ./configure.sh --prefix $PWD/../boolector-release && cd build && make -j4 && make install'}, {'name': 'Setup Z3', 'run': 'brew install z3'}, {'name': 'Get current folder and files', 'run': 'pwd && ls'}, {'name': 'Configure CMake', 'run': 'mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -GNinja -DClang_DIR=$PWD/../clang -DLLVM_DIR=$PWD/../clang -DBoolector_DIR=$PWD/../boolector-release -DZ3_DIR=$PWD/../z3 -DC2GOTO_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -DENABLE_SOLIDITY_FRONTEND=On -DBUILD_STATIC=Off -DENABLE_JIMPLE_FRONTEND=On'}, {'name': 'Build ESBMC', 'run': 'cd build && cmake --build . && cpack && mv ESBMC-*.sh ESBMC-Darwin.sh'}, {'uses': 'actions/upload-artifact@v1', 'with': {'name': 'release-darwin', 'path': './build/ESBMC-Darwin.sh'}}]}, 'build-windows': {'name': 'Build ESBMC with Z3 (Windows)', 'runs-on': 'windows-latest', 'timeout-minutes': 30, 'steps': [{'name': 'Set up Python', 'uses': 'actions/setup-python@v2', 'with': {'python-version': 3.8}}, {'name': 'check python', 'run': 'python --version'}, {'name': 'Update vcpkg', 'run': 'vcpkg.exe update\ncd C:/vcpkg\ngit.exe pull\n.\\bootstrap-vcpkg.bat\n'}, {'name': 'Configure ESBMC', 'run': './scripts/build.ps1'}, {'uses': 'actions/upload-artifact@v2', 'with': {'name': 'release-windows', 'path': 'C:/deps/esbmc'}}]}, 'create-release': {'name': 'Upload Release Asset', 'runs-on': 'ubuntu-20.04', 'needs': ['build-linux', 'build-macos', 'build-windows'], 'steps': [{'name': 'Download Linux Build', 'uses': 'actions/download-artifact@v1', 'with': {'name': 'release-linux', 'path': './'}}, {'name': 'Download Macos Build', 'uses': 'actions/download-artifact@v1', 'with': {'name': 'release-darwin', 'path': './'}}, {'name': 'Download Windows Build', 'uses': 'actions/download-artifact@v1', 'with': {'name': 'release-windows', 'path': './'}}, {'name': 'Get files', 'run': 'ls'}, {'name': 'Create Release', 'id': 'create_release', 'uses': 'actions/create-release@v1.0.0', 'env': {'GITHUB_TOKEN': '${{ secrets.GITHUB_TOKEN }}'}, 'with': {'tag_name': '${{ github.ref }}', 'release_name': 'Release ${{ github.ref }}', 'draft': False, 'prerelease': False}}, {'name': 'Upload Release Asset (Linux)', 'id': 'upload-release-asset-linux', 'uses': 'actions/upload-release-asset@v1.0.1', 'env': {'GITHUB_TOKEN': '${{ secrets.GITHUB_TOKEN }}'}, 'with': {'upload_url': '${{ steps.create_release.outputs.upload_url }}', 'asset_path': './ESBMC-Linux.sh', 'asset_name': 'ESBMC-Linux.sh', 'asset_content_type': 'text/x-shellscript'}}, {'name': 'Upload Release Asset (Darwin)', 'id': 'upload-release-asset-macos', 'uses': 'actions/upload-release-asset@v1.0.1', 'env': {'GITHUB_TOKEN': '${{ secrets.GITHUB_TOKEN }}'}, 'with': {'upload_url': '${{ steps.create_release.outputs.upload_url }}', 'asset_path': './ESBMC-Darwin.sh', 'asset_name': 'ESBMC-Darwin.sh', 'asset_content_type': 'text/x-shellscript'}}, {'name': 'Upload Release Asset (Windows)', 'id': 'upload-release-asset-windows', 'uses': 'actions/upload-release-asset@v1.0.1', 'env': {'GITHUB_TOKEN': '${{ secrets.GITHUB_TOKEN }}'}, 'with': {'upload_url': '${{ steps.create_release.outputs.upload_url }}', 'asset_path': './ESBMC-Windows.zip', 'asset_name': 'ESBMC-Windows.zip', 'asset_content_type': 'application/zip'}}]}}}
2025-11-01 13:55:12,764 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_repair_two_phase/ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449_two_phase_repaired.yml
2025-11-01 13:55:12,764 - main - INFO - 2단계 모드 복구 완료
2025-11-01 13:55:12,764 - main - INFO - 최종 수정된 파일: data_repair_two_phase/ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449_two_phase_repaired.yml
2025-11-01 13:55:12,764 - __main__ - INFO - === 파일 5/5 2단계 복구 완료 ===
2025-11-01 13:55:12,764 - __main__ - INFO - ✅ 성공 (41.23초): ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449 -> ac606821bdac58d2ba7a3c72244842d4ab331a384d052362ec49014e9c8b6449_two_phase_repaired.yml
2025-11-01 13:55:12,764 - __main__ - INFO - ============================================================
2025-11-01 13:55:12,764 - __main__ - INFO - 2단계 자동 복구 완료!
2025-11-01 13:55:12,764 - __main__ - INFO - 총 처리 시간: 158.1초
2025-11-01 13:55:12,764 - __main__ - INFO - 총 파일: 5
2025-11-01 13:55:12,764 - __main__ - INFO - 성공: 5 (100.0%)
2025-11-01 13:55:12,764 - __main__ - INFO - 실패: 0
2025-11-01 13:55:12,764 - __main__ - INFO - 평균 처리 시간: 31.62초/파일
2025-11-01 13:55:12,764 - __main__ - INFO - 출력 파일 위치: data_repair_two_phase
2025-11-01 13:55:12,765 - __main__ - INFO - INFO 로그 파일: logs/two_phase_test_log_20251101_info.log
2025-11-01 13:55:12,765 - __main__ - INFO - DEBUG 로그 파일: logs/two_phase_test_log_20251101_debug.log
2025-11-01 13:55:12,765 - __main__ - INFO - ============================================================
2025-11-01 13:55:12,797 - httpcore.connection - DEBUG - close.started
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.complete
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.started
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.complete
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.started
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.complete
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.started
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.complete
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.started
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.complete
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.started
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.complete
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.started
2025-11-01 13:55:12,798 - httpcore.connection - DEBUG - close.complete
