2025-11-01 22:02:32,687 - __main__ - INFO - GHA-Repair 자동 복구 시작: 3개 파일
2025-11-01 22:02:32,687 - __main__ - INFO - 입력 디렉토리: data_original
2025-11-01 22:02:32,687 - __main__ - INFO - 출력 디렉토리: data_gha_repair
2025-11-01 22:02:32,687 - __main__ - INFO - 프롬프트 모드: Guided (가이드 프롬프트 사용)
2025-11-01 22:02:32,687 - __main__ - INFO - [1/3] 처리 중: 19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32
2025-11-01 22:02:32,687 - __main__ - INFO - 입력 파일 경로: data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32
2025-11-01 22:02:32,687 - __main__ - INFO - 출력 파일 경로: data_gha_repair/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_gha_repaired.yml
2025-11-01 22:02:32,687 - __main__ - INFO - === 파일 1/3 GHA-Repair 복구 시작 ===
2025-11-01 22:02:32,687 - main - INFO - === 2단계 모드 시작 ===
2025-11-01 22:02:32,687 - main - INFO - 1단계: 입력 파일 읽기
2025-11-01 22:02:32,688 - utils.yaml_parser - DEBUG - YAML 파일 읽기 완료: data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32
2025-11-01 22:02:32,688 - main - INFO - 파일 크기: 2692 문자
2025-11-01 22:02:32,688 - main - INFO - === Phase 1: 구문 오류 수정 ===
2025-11-01 22:02:32,688 - main - INFO - 2단계: actionlint 구문 검사
2025-11-01 22:02:32,688 - utils.process_runner - INFO - actionlint 바이너리 발견: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac
2025-11-01 22:02:32,688 - utils.process_runner - INFO - 명령어 실행: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac -format '{{json .}}' data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32
2025-11-01 22:02:32,710 - utils.process_runner - WARNING - 명령어 실행 실패 (코드: 1, 시간: 0.02초)
2025-11-01 22:02:32,710 - utils.process_runner - INFO - actionlint 실행 완료: 오류 발견됨 (코드: 1)
2025-11-01 22:02:32,710 - main - INFO - actionlint에서 1개 오류 발견 (syntax-check 및 expression만)
2025-11-01 22:02:32,710 - main - INFO - actionlint 오류 1개 발견
2025-11-01 22:02:32,710 - main - INFO -   오류 1: could not parse as YAML: yaml: line 35: did not find expected key
2025-11-01 22:02:32,710 - main - INFO - 3단계: 구문 오류 수정 프롬프트 생성
2025-11-01 22:02:32,710 - main - INFO - 4단계: 구문 오류 수정 LLM 호출
2025-11-01 22:02:32,747 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 22:02:32,852 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-476ac006-e367-49c4-b5d0-9e495732ecc8', 'json_data': {'messages': [{'role': 'user', 'content': '### 역할 ###\n너는 GitHub Actions YAML 파일의 구문 오류만을 전문적으로 수정하는 \'정밀한 린터(Linter) 로봇\'이다. 너의 유일한 임무는 주어진 오류 목록을 해결하는 것이다.\n\n엄격한 지시사항 (가장 중요)\n목표: 위에 나열된 \'탐지된 구문 오류\' 목록만을 수정하라.\n\n엄격한 금지사항 (Guardrail):\n- 오류 목록에서 언급되지 않은 그 어떤 코드도 절대 수정하거나 변경하지 마라.\n- 워크플로우의 로직, 스텝 순서, if 조건, run 스크립트 내용 등 의미론적인(semantic) 부분은 절대 건드리지 마라.\n- 새로운 스텝이나 잡(job)을 추가하거나 삭제하지 마라.\n- 주석이나 기존 포맷팅은 최대한 원본을 유지하라.\n\n**원본 YAML:**\n```yaml\nname: Seed Chain\n\non:\n  workflow_call:\n    inputs:\n      chain-api-url:\n        required: true\n        type: string\n      chain-id:\n        required: true\n        type: string\n      seed-script-filename:\n        required: true\n        type: string\n      erc20-deployer-network-name:\n        required: true\n        type: string\n      genesis_validator_addresses:\n        required: true\n        type: string\n      kava_version_filepath:\n        required: true\n        type: string\n    secrets:\n      DEV_WALLET_MNEMONIC:\n        required: true\n\njobs:\n  seed-chain-state:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout repo from master\n        uses: actions/checkout@v3\n        with:\n         ref: master\n      - name: checkout version of kava used by network\n        run: |\n          git pull -p\n          git checkout $(cat ${KAVA_VERSION_FILEPATH})\n         env:\n            KAVA_VERSION_FILEPATH: ${{ inputs.kava_version_filepath }}\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: "1.19"\n          check-latest: true\n          cache: true\n      - name: build kava binary\n        run: make install\n      - name: checkout go evm tools repo\n        uses: actions/checkout@v3\n        with:\n          repository: ethereum/go-ethereum\n          path: go-ethereum\n          ref: v1.10.26\n      - name: install go evm tools\n        run: |\n          make\n          make devtools\n        working-directory: go-ethereum\n      - name: checkout kava bridge repo for deploying evm contracts\n        uses: actions/checkout@v3\n        with:\n          repository: Kava-Labs/kava-bridge\n          path: kava-bridge\n          ref: main\n      - name: install nodeJS\n        uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 18\n          cache-dependency-path: kava-bridge/contract/package.json\n      - name: "install ERC20 contract deployment dependencies"\n        run: "npm install"\n        working-directory: kava-bridge/contract\n      - name: compile default erc20 contracts\n        run: make compile-contracts\n        working-directory: kava-bridge\n      - name: run seed scripts\n        run: bash ${GITHUB_WORKSPACE}/.github/scripts/${SEED_SCRIPT_FILENAME}\n        working-directory: kava-bridge/contract\n        env:\n          CHAIN_API_URL: ${{ inputs.chain-api-url }}\n          CHAIN_ID: ${{ inputs.chain-id }}\n          DEV_WALLET_MNEMONIC: ${{ secrets.DEV_WALLET_MNEMONIC }}\n          SEED_SCRIPT_FILENAME: ${{ inputs.seed-script-filename }}\n          ERC20_DEPLOYER_NETWORK_NAME: ${{ inputs.erc20-deployer-network-name }}\n          GENESIS_VALIDATOR_ADDRESSES: ${{ inputs.genesis_validator_addresses }}\n\n```\n\n**탐지된 구문 오류:**\n1. could not parse as YAML: yaml: line 35: did not find expected key\n   Line 35: 0\n\n**수정된 YAML:**\n```yaml'}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 22:02:32,865 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 22:02:32,865 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 22:02:32,876 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c802900>
2025-11-01 22:02:32,876 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1081ee0d0> server_hostname='api.openai.com' timeout=60
2025-11-01 22:02:32,892 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1087befd0>
2025-11-01 22:02:32,892 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 22:02:32,892 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 22:02:32,892 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 22:02:32,892 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 22:02:32,892 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 22:02:48,702 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 13:02:48 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'14972'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'15068'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199089'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'273ms'), (b'x-request-id', b'req_57fc991d576e4b6e8b1b6cd8e294a91c'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=W3JbmgDJtrzgVI7UNJk67aSrd3FYL_n_gaDB9AIIMNE-1762002168-1.0.1.1-AL1ZdqLEOVI7fy1UxDQ4y6nTzwtgPS1UYXKjyMrtK5cnnm.XoRQsNcIxQ0XypPCIVh5DdbYWYPbNS716to4tDJNX12q00jTdU8Ywrr6sx3U; path=/; expires=Sat, 01-Nov-25 13:32:48 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=Udv7TUTkeVcOr9AAHjYF8otl4Lb3wm_xlyTgPXv6wNI-1762002168725-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'997b964fcaab30c2-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 22:02:48,705 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 22:02:48,705 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 22:02:48,705 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 22:02:48,705 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 22:02:48,705 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 22:02:48,706 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 13:02:48 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '14972'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '15068'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199089'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '273ms'), ('x-request-id', 'req_57fc991d576e4b6e8b1b6cd8e294a91c'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=W3JbmgDJtrzgVI7UNJk67aSrd3FYL_n_gaDB9AIIMNE-1762002168-1.0.1.1-AL1ZdqLEOVI7fy1UxDQ4y6nTzwtgPS1UYXKjyMrtK5cnnm.XoRQsNcIxQ0XypPCIVh5DdbYWYPbNS716to4tDJNX12q00jTdU8Ywrr6sx3U; path=/; expires=Sat, 01-Nov-25 13:32:48 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=Udv7TUTkeVcOr9AAHjYF8otl4Lb3wm_xlyTgPXv6wNI-1762002168725-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '997b964fcaab30c2-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 22:02:48,706 - openai._base_client - DEBUG - request_id: req_57fc991d576e4b6e8b1b6cd8e294a91c
2025-11-01 22:02:48,713 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 22:02:48,713 - main - INFO - 5단계: 구문 수정된 YAML 추출
2025-11-01 22:02:48,713 - main - INFO - Phase 1 완료, 수정된 YAML 크기: 2688 문자
2025-11-01 22:02:48,713 - main - INFO - === Phase 2: 스멜 수정 ===
2025-11-01 22:02:48,714 - main - INFO - 6단계: 임시 파일 생성 및 스멜 검사
2025-11-01 22:02:48,714 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_temp_phase1.yml
2025-11-01 22:02:48,714 - main - INFO - 7단계: smell detection 실행
2025-11-01 22:02:48,715 - utils.process_runner - INFO - 명령어 실행: cd /Users/nam/Desktop/repository/Catching-Smells/RQ3/gha-ci-detector_paper/src && /Users/nam/Desktop/repository/Catching-Smells/.venv/bin/python -m gha_ci_detector file /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_temp_phase1.yml
2025-11-01 22:02:49,333 - utils.process_runner - DEBUG - 명령어 실행 성공 (0.62초)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - Smell detector stdout: Welcome to GHA CI Detector
Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_temp_phase1.yml
We have found 10 smells
	- 3. Use fixed version for runs-on argument (line 29)
	- 6. Define permissions for workflows with external actions (job at line: 29)
	- 8. Use commit hash instead of tags for action versions (line 32)
	- 8. Use commit hash instead of tags for action versions (line 42)
	- 8. Use commit hash instead of tags for action versions (line 67)
	- 9. Steps should only perform a single command (line -1)
	- 10. Avoid jobs without timeouts (line: 29)
	- 12. Avoid workflows without comments
	- 14. Avoid incorrectly formatted workflows
	- 22. Avoid deploying jobs on forks
The following styling errors were found: 
35:10: wrong indentation: expected 10 but found 9 (indentation)
88:81: no new line character at the end of file (new-line-at-end-of-file)

2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - Smell detector stderr: 
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - Smell detector return code: 0
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - Smell detector 출력 라인 수: 16
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 0: Welcome to GHA CI Detector
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Welcome to GHA CI Detector
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 1: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_temp_phase1.yml
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_temp_phase1.yml
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 2: We have found 10 smells
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: We have found 10 smells
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 3: - 3. Use fixed version for runs-on argument (line 29)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#3): Use fixed version for runs-on argument (line 29)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 4: - 6. Define permissions for workflows with external actions (job at line: 29)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 29)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 5: - 8. Use commit hash instead of tags for action versions (line 32)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 32)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 6: - 8. Use commit hash instead of tags for action versions (line 42)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 42)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 7: - 8. Use commit hash instead of tags for action versions (line 67)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 67)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 8: - 9. Steps should only perform a single command (line -1)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#9): Steps should only perform a single command (line -1)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 9: - 10. Avoid jobs without timeouts (line: 29)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 29)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 10: - 12. Avoid workflows without comments
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#12): Avoid workflows without comments
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 11: - 14. Avoid incorrectly formatted workflows
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#14): Avoid incorrectly formatted workflows
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 12: - 22. Avoid deploying jobs on forks
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#22): Avoid deploying jobs on forks
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 13: The following styling errors were found:
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: The following styling errors were found:
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 14: 35:10: wrong indentation: expected 10 but found 9 (indentation)
2025-11-01 22:02:49,334 - utils.process_runner - DEBUG - 라인 15: 88:81: no new line character at the end of file (new-line-at-end-of-file)
2025-11-01 22:02:49,334 - utils.process_runner - INFO - 총 1개 대상 스멜 파싱됨 (1,4,5,10,11,15,16번만)
2025-11-01 22:02:49,334 - utils.process_runner - INFO - Smell detector 실행 완료: 1개 스멜 발견
2025-11-01 22:02:49,334 - main - INFO - 스멜 1개 발견
2025-11-01 22:02:49,334 - main - INFO -   스멜 1: Avoid jobs without timeouts (line: 29)
2025-11-01 22:02:49,334 - main - INFO - 8단계: 스멜 수정 프롬프트 생성
2025-11-01 22:02:49,334 - main - INFO - 9단계: 스멜 수정 LLM 호출
2025-11-01 22:02:49,342 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 22:02:49,343 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-cd9c393c-4c29-4667-b17c-7640b4dae163', 'json_data': {'messages': [{'role': 'user', 'content': '### 역할 ###\n너는 GitHub Actions 워크플로우의 \'특정 코드 스멜(Smell) 목록\'만을 모범 사례에 따라 수정하는 \'전문 DevOps 엔지니어\'이다.\n\n엄격한 지시사항 (가장 중요)\n목표: 위에 나열된 \'탐지된 의미론적 스멜 목록\'만을 GitHub 모범 사례에 따라 수정하라.\n\n엄격한 금지사항 (Guardrail):\n- 목록에 없는 스멜이나 다른 코드 품질 문제는 절대 수정하지 마라. (예: 효율성을 임의로 개선하려 하지 마라)\n- 스멜 수정과 직접적으로 관련 없는 코드는 절대 변경하지 마라. (예: timeout 스멜을 고치기 위해 permissions 키를 수정하지 마라)\n- 기존 워크플로우의 핵심 기능, 동작 순서, if 조건 등 구조적/논리적 흐름을 변경하지 않는 선에서 스멜을 수정하라\n\n**현재 YAML (구문 오류는 이미 수정됨):**\n```yaml\nname: Seed Chain\n\non:\n  workflow_call:\n    inputs:\n      chain-api-url:\n        required: true\n        type: string\n      chain-id:\n        required: true\n        type: string\n      seed-script-filename:\n        required: true\n        type: string\n      erc20-deployer-network-name:\n        required: true\n        type: string\n      genesis_validator_addresses:\n        required: true\n        type: string\n      kava_version_filepath:\n        required: true\n        type: string\n    secrets:\n      DEV_WALLET_MNEMONIC:\n        required: true\n\njobs:\n  seed-chain-state:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout repo from master\n        uses: actions/checkout@v3\n        with:\n         ref: master\n      - name: checkout version of kava used by network\n        run: |\n          git pull -p\n          git checkout $(cat ${KAVA_VERSION_FILEPATH})\n        env:\n          KAVA_VERSION_FILEPATH: ${{ inputs.kava_version_filepath }}\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: "1.19"\n          check-latest: true\n          cache: true\n      - name: build kava binary\n        run: make install\n      - name: checkout go evm tools repo\n        uses: actions/checkout@v3\n        with:\n          repository: ethereum/go-ethereum\n          path: go-ethereum\n          ref: v1.10.26\n      - name: install go evm tools\n        run: |\n          make\n          make devtools\n        working-directory: go-ethereum\n      - name: checkout kava bridge repo for deploying evm contracts\n        uses: actions/checkout@v3\n        with:\n          repository: Kava-Labs/kava-bridge\n          path: kava-bridge\n          ref: main\n      - name: install nodeJS\n        uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 18\n          cache-dependency-path: kava-bridge/contract/package.json\n      - name: "install ERC20 contract deployment dependencies"\n        run: "npm install"\n        working-directory: kava-bridge/contract\n      - name: compile default erc20 contracts\n        run: make compile-contracts\n        working-directory: kava-bridge\n      - name: run seed scripts\n        run: bash ${GITHUB_WORKSPACE}/.github/scripts/${SEED_SCRIPT_FILENAME}\n        working-directory: kava-bridge/contract\n        env:\n          CHAIN_API_URL: ${{ inputs.chain-api-url }}\n          CHAIN_ID: ${{ inputs.chain-id }}\n          DEV_WALLET_MNEMONIC: ${{ secrets.DEV_WALLET_MNEMONIC }}\n          SEED_SCRIPT_FILENAME: ${{ inputs.seed-script-filename }}\n          ERC20_DEPLOYER_NETWORK_NAME: ${{ inputs.erc20-deployer-network-name }}\n          GENESIS_VALIDATOR_ADDRESSES: ${{ inputs.genesis_validator_addresses }}\n```\n\n**탐지된 의미론적 스멜:**\n1. **code_smell**: Avoid jobs without timeouts (line: 29)\n\n**개선된 YAML:**\n```yaml'}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 22:02:49,343 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 22:02:49,343 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 22:02:49,359 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c931310>
2025-11-01 22:02:49,359 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10797ed50> server_hostname='api.openai.com' timeout=60
2025-11-01 22:02:49,367 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10820ba80>
2025-11-01 22:02:49,367 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 22:02:49,367 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 22:02:49,367 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 22:02:49,367 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 22:02:49,367 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 22:03:04,720 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 13:03:04 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'14985'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'15007'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199070'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'279ms'), (b'x-request-id', b'req_22ecf883fc08432789e22ea3e09ec8ae'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=DaxWmsictz85Mybj8TZyHyfm_tyy98HmZxbLu.hynm0-1762002184-1.0.1.1-5ClXjZtLiuXaERDm2pFyoSeNBJKrGD0r1cdMYSUf6ebwWUVYLujHozjUJBBvIoeQ8ANwh_DMcDPfvHYGM96JRhwTjM1cQT6OLQ56Z.n7_4c; path=/; expires=Sat, 01-Nov-25 13:33:04 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=u53D8wuRxKSuF_GyR5EdoTTi_ZfpTEx5eEHDVOXKbos-1762002184745-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'997b96b6bbc747f8-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 22:03:04,722 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 22:03:04,723 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 22:03:04,723 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 22:03:04,723 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 22:03:04,723 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 22:03:04,723 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 13:03:04 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '14985'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '15007'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199070'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '279ms'), ('x-request-id', 'req_22ecf883fc08432789e22ea3e09ec8ae'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=DaxWmsictz85Mybj8TZyHyfm_tyy98HmZxbLu.hynm0-1762002184-1.0.1.1-5ClXjZtLiuXaERDm2pFyoSeNBJKrGD0r1cdMYSUf6ebwWUVYLujHozjUJBBvIoeQ8ANwh_DMcDPfvHYGM96JRhwTjM1cQT6OLQ56Z.n7_4c; path=/; expires=Sat, 01-Nov-25 13:33:04 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=u53D8wuRxKSuF_GyR5EdoTTi_ZfpTEx5eEHDVOXKbos-1762002184745-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '997b96b6bbc747f8-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 22:03:04,723 - openai._base_client - DEBUG - request_id: req_22ecf883fc08432789e22ea3e09ec8ae
2025-11-01 22:03:04,724 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 22:03:04,724 - main - INFO - 10단계: 최종 수정된 YAML 추출
2025-11-01 22:03:04,725 - main - INFO - Phase 2 완료, 최종 YAML 크기: 2760 문자
2025-11-01 22:03:04,725 - main - DEBUG - 임시 파일 삭제: data_original/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_temp_phase1.yml
2025-11-01 22:03:04,725 - main - INFO - 11단계: 최종 결과 검증 및 저장
2025-11-01 22:03:04,739 - utils.yaml_parser - DEBUG - 파싱된 YAML 객체: {'name': 'Seed Chain', 'on': {'workflow_call': {'inputs': {'chain-api-url': {'required': True, 'type': 'string'}, 'chain-id': {'required': True, 'type': 'string'}, 'seed-script-filename': {'required': True, 'type': 'string'}, 'erc20-deployer-network-name': {'required': True, 'type': 'string'}, 'genesis_validator_addresses': {'required': True, 'type': 'string'}, 'kava_version_filepath': {'required': True, 'type': 'string'}}, 'secrets': {'DEV_WALLET_MNEMONIC': {'required': True}}}}, 'jobs': {'seed-chain-state': {'runs-on': 'ubuntu-latest', 'timeout-minutes': 60, 'steps': [{'name': 'checkout repo from master', 'uses': 'actions/checkout@v3', 'with': {'ref': 'master'}}, {'name': 'checkout version of kava used by network', 'run': 'git pull -p\ngit checkout $(cat ${KAVA_VERSION_FILEPATH})\n', 'env': {'KAVA_VERSION_FILEPATH': '${{ inputs.kava_version_filepath }}'}}, {'name': 'Set up Go', 'uses': 'actions/setup-go@v3', 'with': {'go-version': '1.19', 'check-latest': True, 'cache': True}}, {'name': 'build kava binary', 'run': 'make install'}, {'name': 'checkout go evm tools repo', 'uses': 'actions/checkout@v3', 'with': {'repository': 'ethereum/go-ethereum', 'path': 'go-ethereum', 'ref': 'v1.10.26'}}, {'name': 'install go evm tools', 'run': 'make\nmake devtools\n', 'working-directory': 'go-ethereum'}, {'name': 'checkout kava bridge repo for deploying evm contracts', 'uses': 'actions/checkout@v3', 'with': {'repository': 'Kava-Labs/kava-bridge', 'path': 'kava-bridge', 'ref': 'main'}}, {'name': 'install nodeJS', 'uses': 'actions/setup-node@v3', 'with': {'cache': 'npm', 'node-version': 18, 'cache-dependency-path': 'kava-bridge/contract/package.json'}}, {'name': 'install ERC20 contract deployment dependencies', 'run': 'npm install', 'working-directory': 'kava-bridge/contract'}, {'name': 'compile default erc20 contracts', 'run': 'make compile-contracts', 'working-directory': 'kava-bridge'}, {'name': 'run seed scripts', 'run': 'bash ${GITHUB_WORKSPACE}/.github/scripts/${SEED_SCRIPT_FILENAME}', 'working-directory': 'kava-bridge/contract', 'env': {'CHAIN_API_URL': '${{ inputs.chain-api-url }}', 'CHAIN_ID': '${{ inputs.chain-id }}', 'DEV_WALLET_MNEMONIC': '${{ secrets.DEV_WALLET_MNEMONIC }}', 'SEED_SCRIPT_FILENAME': '${{ inputs.seed-script-filename }}', 'ERC20_DEPLOYER_NETWORK_NAME': '${{ inputs.erc20-deployer-network-name }}', 'GENESIS_VALIDATOR_ADDRESSES': '${{ inputs.genesis_validator_addresses }}'}}]}}}
2025-11-01 22:03:04,739 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_gha_repair/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_gha_repaired.yml
2025-11-01 22:03:04,739 - main - INFO - 2단계 모드 복구 완료
2025-11-01 22:03:04,739 - main - INFO - 최종 수정된 파일: data_gha_repair/19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_gha_repaired.yml
2025-11-01 22:03:04,739 - __main__ - INFO - === 파일 1/3 GHA-Repair 복구 완료 ===
2025-11-01 22:03:04,739 - __main__ - INFO - ✅ 성공 (32.05초): 19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32 -> 19258ed075aa8e803221bd5865d57c00efe95f8bef222797a0eebdfff6c2ec32_gha_repaired.yml
2025-11-01 22:03:04,739 - __main__ - INFO - [2/3] 처리 중: 6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428
2025-11-01 22:03:04,739 - __main__ - INFO - 입력 파일 경로: data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428
2025-11-01 22:03:04,739 - __main__ - INFO - 출력 파일 경로: data_gha_repair/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_gha_repaired.yml
2025-11-01 22:03:04,739 - __main__ - INFO - === 파일 2/3 GHA-Repair 복구 시작 ===
2025-11-01 22:03:04,739 - main - INFO - === 2단계 모드 시작 ===
2025-11-01 22:03:04,739 - main - INFO - 1단계: 입력 파일 읽기
2025-11-01 22:03:04,740 - utils.yaml_parser - DEBUG - YAML 파일 읽기 완료: data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428
2025-11-01 22:03:04,740 - main - INFO - 파일 크기: 4982 문자
2025-11-01 22:03:04,740 - main - INFO - === Phase 1: 구문 오류 수정 ===
2025-11-01 22:03:04,740 - main - INFO - 2단계: actionlint 구문 검사
2025-11-01 22:03:04,740 - utils.process_runner - INFO - actionlint 바이너리 발견: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac
2025-11-01 22:03:04,740 - utils.process_runner - INFO - 명령어 실행: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac -format '{{json .}}' data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428
2025-11-01 22:03:04,771 - utils.process_runner - WARNING - 명령어 실행 실패 (코드: 1, 시간: 0.03초)
2025-11-01 22:03:04,771 - utils.process_runner - INFO - actionlint 실행 완료: 오류 발견됨 (코드: 1)
2025-11-01 22:03:04,771 - main - INFO - actionlint에서 3개 오류 발견 (syntax-check 및 expression만)
2025-11-01 22:03:04,771 - main - INFO - actionlint 오류 3개 발견
2025-11-01 22:03:04,771 - main - INFO -   오류 1: expected scalar node for string value but found sequence node with "!!seq" tag
2025-11-01 22:03:04,771 - main - INFO -   오류 2: expected scalar node for string value but found sequence node with "!!seq" tag
2025-11-01 22:03:04,771 - main - INFO -   오류 3: expected scalar node for string value but found sequence node with "!!seq" tag
2025-11-01 22:03:04,771 - main - INFO - 3단계: 구문 오류 수정 프롬프트 생성
2025-11-01 22:03:04,771 - main - INFO - 4단계: 구문 오류 수정 LLM 호출
2025-11-01 22:03:04,779 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 22:03:04,779 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-3bb5871d-050d-475e-bf51-95f14153661d', 'json_data': {'messages': [{'role': 'user', 'content': '### 역할 ###\n너는 GitHub Actions YAML 파일의 구문 오류만을 전문적으로 수정하는 \'정밀한 린터(Linter) 로봇\'이다. 너의 유일한 임무는 주어진 오류 목록을 해결하는 것이다.\n\n엄격한 지시사항 (가장 중요)\n목표: 위에 나열된 \'탐지된 구문 오류\' 목록만을 수정하라.\n\n엄격한 금지사항 (Guardrail):\n- 오류 목록에서 언급되지 않은 그 어떤 코드도 절대 수정하거나 변경하지 마라.\n- 워크플로우의 로직, 스텝 순서, if 조건, run 스크립트 내용 등 의미론적인(semantic) 부분은 절대 건드리지 마라.\n- 새로운 스텝이나 잡(job)을 추가하거나 삭제하지 마라.\n- 주석이나 기존 포맷팅은 최대한 원본을 유지하라.\n\n**원본 YAML:**\n```yaml\nname: Build Containers\n\non:\n  workflow_call:\n    inputs:\n      tag:\n        required: true\n        type: string\n    secrets:\n      DOCKERHUB_USERNAME:\n        required: true\n      DOCKERHUB_TOKEN:\n        required: true\n\njobs:\n  build-frontend:\n    runs-on: ubuntu-latest\n    name: Build Frontend\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: |\n              hkotel/mealie\n              ghcr.io/${{ github.repository }}\n\n      - name: Build and push Frontend images\n        uses: docker/build-push-action@v4\n        with:\n          file: docker/frontend.Dockerfile\n          context: .\n          push: true\n          tags: frontend-${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms:\n            - linux/amd64\n            - linux/arm64\n\n  build-backend:\n    runs-on: ubuntu-latest\n    name: Build Backend\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Override __init__.py\n        run: |\n          echo "__version__ = \\"${{ inputs.tag }}\\"" > ./mealie/__init__.py\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: |\n            hkotel/mealie\n            ghcr.io/${{ github.repository }}\n\n      - name: Build and push API images\n        uses: docker/build-push-action@v4\n        with:\n          file: docker/api.Dockerfile\n          context: .\n          push: true\n          tags: api-${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms:\n            - linux/amd64\n            - linux/arm64\n\n  build-omni:\n    runs-on: ubuntu-latest\n    name: Build Omni\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Override __init__.py\n        run: |\n          echo "__version__ = \\"${{ inputs.tag }}\\"" > ./mealie/__init__.py\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: |\n            hkotel/mealie\n            ghcr.io/${{ github.repository }}\n\n      - name: Build and push API images\n        uses: docker/build-push-action@v4\n        with:\n          file: docker/omni.Dockerfile\n          context: .\n          push: true\n          tags: omni-${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms:\n            - linux/amd64\n            - linux/arm64\n\n```\n\n**탐지된 구문 오류:**\n1. expected scalar node for string value but found sequence node with "!!seq" tag\n   Line 66: 13\n2. expected scalar node for string value but found sequence node with "!!seq" tag\n   Line 123: 13\n3. expected scalar node for string value but found sequence node with "!!seq" tag\n   Line 180: 13\n\n**수정된 YAML:**\n```yaml'}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 22:03:04,780 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 22:03:04,780 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 22:03:04,786 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c93c770>
2025-11-01 22:03:04,786 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1079a6490> server_hostname='api.openai.com' timeout=60
2025-11-01 22:03:04,795 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c80a570>
2025-11-01 22:03:04,795 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 22:03:04,795 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 22:03:04,795 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 22:03:04,795 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 22:03:04,795 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 22:03:28,085 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 13:03:28 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'22539'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'22685'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'198464'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'460ms'), (b'x-request-id', b'req_9e6afe13beb240a88e15bead22b3044e'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=x5013EhxZFc.eG2rxi1vh8T4Dwty65H6pwADwLRwKd8-1762002208-1.0.1.1-SNGYB1t3jZ1h.p6ZPWzcBbjQ0bG8PKym8Y5WxbqODD.8LMpoQrvGSjFZ8OM_rJrvJp4TwZLnEIAlIKK_Y0RM15U0q2Q3NBLtIZGAyBn_DWQ; path=/; expires=Sat, 01-Nov-25 13:33:28 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=l9vyO0pvBMoAzKRaNKYNVLNmPY.iE7veWliXB65s5EI-1762002208108-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'997b97172ee53152-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 22:03:28,088 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 22:03:28,089 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 22:03:28,089 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 22:03:28,089 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 22:03:28,089 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 22:03:28,090 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 13:03:28 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '22539'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '22685'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '198464'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '460ms'), ('x-request-id', 'req_9e6afe13beb240a88e15bead22b3044e'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=x5013EhxZFc.eG2rxi1vh8T4Dwty65H6pwADwLRwKd8-1762002208-1.0.1.1-SNGYB1t3jZ1h.p6ZPWzcBbjQ0bG8PKym8Y5WxbqODD.8LMpoQrvGSjFZ8OM_rJrvJp4TwZLnEIAlIKK_Y0RM15U0q2Q3NBLtIZGAyBn_DWQ; path=/; expires=Sat, 01-Nov-25 13:33:28 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=l9vyO0pvBMoAzKRaNKYNVLNmPY.iE7veWliXB65s5EI-1762002208108-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '997b97172ee53152-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 22:03:28,090 - openai._base_client - DEBUG - request_id: req_9e6afe13beb240a88e15bead22b3044e
2025-11-01 22:03:28,092 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 22:03:28,092 - main - INFO - 5단계: 구문 수정된 YAML 추출
2025-11-01 22:03:28,092 - main - INFO - Phase 1 완료, 수정된 YAML 크기: 4821 문자
2025-11-01 22:03:28,092 - main - INFO - === Phase 2: 스멜 수정 ===
2025-11-01 22:03:28,092 - main - INFO - 6단계: 임시 파일 생성 및 스멜 검사
2025-11-01 22:03:28,093 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_temp_phase1.yml
2025-11-01 22:03:28,093 - main - INFO - 7단계: smell detection 실행
2025-11-01 22:03:28,093 - utils.process_runner - INFO - 명령어 실행: cd /Users/nam/Desktop/repository/Catching-Smells/RQ3/gha-ci-detector_paper/src && /Users/nam/Desktop/repository/Catching-Smells/.venv/bin/python -m gha_ci_detector file /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_temp_phase1.yml
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 명령어 실행 성공 (0.56초)
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - Smell detector stdout: Welcome to GHA CI Detector
Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_temp_phase1.yml
We have found 23 smells
	- 2. Prevent running issue/PR actions on forks line -1:51
	- 3. Use fixed version for runs-on argument (line 16)
	- 6. Define permissions for workflows with external actions (job at line: 16)
	- 6. Define permissions for workflows with external actions (job at line: 118)
	- 6. Define permissions for workflows with external actions (job at line: 65)
	- 8. Use commit hash instead of tags for action versions (line 20)
	- 8. Use commit hash instead of tags for action versions (line 31)
	- 8. Use commit hash instead of tags for action versions (line 55)
	- 8. Use commit hash instead of tags for action versions (line 24)
	- 8. Use commit hash instead of tags for action versions (line 36)
	- 8. Use commit hash instead of tags for action versions (line 122)
	- 10. Avoid jobs without timeouts (line: 16)
	- 10. Avoid jobs without timeouts (line: 65)
	- 10. Avoid jobs without timeouts (line: 118)
	- 12. Avoid workflows without comments
	- 14. Avoid incorrectly formatted workflows
	- 15. Use permissions whenever using Github Token (job at line 65)
	- 15. Use permissions whenever using Github Token (job at line 16)
	- 15. Use permissions whenever using Github Token (job at line 118)
	- 19. Run tests on multiple OS's (job: build-backend)
	- 19. Run tests on multiple OS's (job: build-omni)
	- 19. Run tests on multiple OS's (job: build-frontend)
	- 22. Avoid deploying jobs on forks
The following styling errors were found: 
169:46: no new line character at the end of file (new-line-at-end-of-file)

2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - Smell detector stderr: 
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - Smell detector return code: 0
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - Smell detector 출력 라인 수: 28
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 라인 0: Welcome to GHA CI Detector
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Welcome to GHA CI Detector
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 라인 1: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_temp_phase1.yml
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_temp_phase1.yml
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 라인 2: We have found 23 smells
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: We have found 23 smells
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 라인 3: - 2. Prevent running issue/PR actions on forks line -1:51
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#2): Prevent running issue/PR actions on forks line -1:51
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 라인 4: - 3. Use fixed version for runs-on argument (line 16)
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#3): Use fixed version for runs-on argument (line 16)
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 라인 5: - 6. Define permissions for workflows with external actions (job at line: 16)
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 16)
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 라인 6: - 6. Define permissions for workflows with external actions (job at line: 118)
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 118)
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 라인 7: - 6. Define permissions for workflows with external actions (job at line: 65)
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 65)
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 라인 8: - 8. Use commit hash instead of tags for action versions (line 20)
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 20)
2025-11-01 22:03:28,656 - utils.process_runner - DEBUG - 라인 9: - 8. Use commit hash instead of tags for action versions (line 31)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 31)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 10: - 8. Use commit hash instead of tags for action versions (line 55)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 55)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 11: - 8. Use commit hash instead of tags for action versions (line 24)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 24)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 12: - 8. Use commit hash instead of tags for action versions (line 36)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 36)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 13: - 8. Use commit hash instead of tags for action versions (line 122)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 122)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 14: - 10. Avoid jobs without timeouts (line: 16)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 16)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 15: - 10. Avoid jobs without timeouts (line: 65)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 65)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 16: - 10. Avoid jobs without timeouts (line: 118)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 118)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 17: - 12. Avoid workflows without comments
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#12): Avoid workflows without comments
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 18: - 14. Avoid incorrectly formatted workflows
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#14): Avoid incorrectly formatted workflows
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 19: - 15. Use permissions whenever using Github Token (job at line 65)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 스멜 감지 (#15): Use permissions whenever using Github Token (job at line 65)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 20: - 15. Use permissions whenever using Github Token (job at line 16)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 스멜 감지 (#15): Use permissions whenever using Github Token (job at line 16)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 21: - 15. Use permissions whenever using Github Token (job at line 118)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 스멜 감지 (#15): Use permissions whenever using Github Token (job at line 118)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 22: - 19. Run tests on multiple OS's (job: build-backend)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#19): Run tests on multiple OS's (job: build-backend)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 23: - 19. Run tests on multiple OS's (job: build-omni)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#19): Run tests on multiple OS's (job: build-omni)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 24: - 19. Run tests on multiple OS's (job: build-frontend)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#19): Run tests on multiple OS's (job: build-frontend)
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 25: - 22. Avoid deploying jobs on forks
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#22): Avoid deploying jobs on forks
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 26: The following styling errors were found:
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: The following styling errors were found:
2025-11-01 22:03:28,657 - utils.process_runner - DEBUG - 라인 27: 169:46: no new line character at the end of file (new-line-at-end-of-file)
2025-11-01 22:03:28,657 - utils.process_runner - INFO - 총 6개 대상 스멜 파싱됨 (1,4,5,10,11,15,16번만)
2025-11-01 22:03:28,657 - utils.process_runner - INFO - Smell detector 실행 완료: 6개 스멜 발견
2025-11-01 22:03:28,657 - main - INFO - 스멜 6개 발견
2025-11-01 22:03:28,657 - main - INFO -   스멜 1: Avoid jobs without timeouts (line: 16)
2025-11-01 22:03:28,657 - main - INFO -   스멜 2: Avoid jobs without timeouts (line: 65)
2025-11-01 22:03:28,657 - main - INFO -   스멜 3: Avoid jobs without timeouts (line: 118)
2025-11-01 22:03:28,657 - main - INFO - 8단계: 스멜 수정 프롬프트 생성
2025-11-01 22:03:28,657 - main - INFO - 9단계: 스멜 수정 LLM 호출
2025-11-01 22:03:28,665 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 22:03:28,666 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-09e038b6-1ec6-40b4-98f3-ce4a81c5f5b5', 'json_data': {'messages': [{'role': 'user', 'content': '### 역할 ###\n너는 GitHub Actions 워크플로우의 \'특정 코드 스멜(Smell) 목록\'만을 모범 사례에 따라 수정하는 \'전문 DevOps 엔지니어\'이다.\n\n엄격한 지시사항 (가장 중요)\n목표: 위에 나열된 \'탐지된 의미론적 스멜 목록\'만을 GitHub 모범 사례에 따라 수정하라.\n\n엄격한 금지사항 (Guardrail):\n- 목록에 없는 스멜이나 다른 코드 품질 문제는 절대 수정하지 마라. (예: 효율성을 임의로 개선하려 하지 마라)\n- 스멜 수정과 직접적으로 관련 없는 코드는 절대 변경하지 마라. (예: timeout 스멜을 고치기 위해 permissions 키를 수정하지 마라)\n- 기존 워크플로우의 핵심 기능, 동작 순서, if 조건 등 구조적/논리적 흐름을 변경하지 않는 선에서 스멜을 수정하라\n\n**현재 YAML (구문 오류는 이미 수정됨):**\n```yaml\nname: Build Containers\n\non:\n  workflow_call:\n    inputs:\n      tag:\n        required: true\n        type: string\n    secrets:\n      DOCKERHUB_USERNAME:\n        required: true\n      DOCKERHUB_TOKEN:\n        required: true\n\njobs:\n  build-frontend:\n    runs-on: ubuntu-latest\n    name: Build Frontend\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: hkotel/mealie, ghcr.io/${{ github.repository }}\n\n      - name: Build and push Frontend images\n        uses: docker/build-push-action@v4\n        with:\n          file: docker/frontend.Dockerfile\n          context: .\n          push: true\n          tags: frontend-${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64, linux/arm64\n\n  build-backend:\n    runs-on: ubuntu-latest\n    name: Build Backend\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Override __init__.py\n        run: |\n          echo "__version__ = \\"${{ inputs.tag }}\\"" > ./mealie/__init__.py\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: hkotel/mealie, ghcr.io/${{ github.repository }}\n\n      - name: Build and push API images\n        uses: docker/build-push-action@v4\n        with:\n          file: docker/api.Dockerfile\n          context: .\n          push: true\n          tags: api-${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64, linux/arm64\n\n  build-omni:\n    runs-on: ubuntu-latest\n    name: Build Omni\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n        with:\n          image: tonistiigi/binfmt:latest\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          install: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Override __init__.py\n        run: |\n          echo "__version__ = \\"${{ inputs.tag }}\\"" > ./mealie/__init__.py\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7\n        with:\n          images: hkotel/mealie, ghcr.io/${{ github.repository }}\n\n      - name: Build and push API images\n        uses: docker/build-push-action@v4\n        with:\n          file: docker/omni.Dockerfile\n          context: .\n          push: true\n          tags: omni-${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64, linux/arm64\n```\n\n**탐지된 의미론적 스멜:**\n1. **code_smell**: Avoid jobs without timeouts (line: 16)\n2. **code_smell**: Avoid jobs without timeouts (line: 65)\n3. **code_smell**: Avoid jobs without timeouts (line: 118)\n4. **code_smell**: Use permissions whenever using Github Token (job at line 65)\n5. **code_smell**: Use permissions whenever using Github Token (job at line 16)\n6. **code_smell**: Use permissions whenever using Github Token (job at line 118)\n\n**개선된 YAML:**\n```yaml'}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 22:03:28,667 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 22:03:28,667 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 22:03:28,672 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c8bc490>
2025-11-01 22:03:28,672 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1079a6350> server_hostname='api.openai.com' timeout=60
2025-11-01 22:03:28,680 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c8bd8c0>
2025-11-01 22:03:28,680 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 22:03:28,680 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 22:03:28,680 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 22:03:28,680 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 22:03:28,680 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 22:03:55,866 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 13:03:55 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'26925'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'26952'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'198447'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'465ms'), (b'x-request-id', b'req_5fd6085d848f4f018d8d4da3d826fbe2'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=wo3_F7Vxw0yZ66v3Nxr6VW7TAmOJgcWA99OR7kcofpw-1762002235-1.0.1.1-Mu0c1pRgfUE2DUm4BpcrHnUZqLTj0q1OnebIKI4Cyzi1N7oq3xuueGyrq_18CPRNtQJdISvBq8yCqwNgtuhanzQYOAWoKn.prlg7FmoefFQ; path=/; expires=Sat, 01-Nov-25 13:33:55 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=5a5ccXnyVmFUFwtvp7rERjQ9zRsQMWU0KKY0lVvbJVE-1762002235894-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'997b97ac7d8bd1d2-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 22:03:55,868 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 22:03:55,869 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 22:03:55,872 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 22:03:55,872 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 22:03:55,872 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 22:03:55,872 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 13:03:55 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '26925'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '26952'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '198447'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '465ms'), ('x-request-id', 'req_5fd6085d848f4f018d8d4da3d826fbe2'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=wo3_F7Vxw0yZ66v3Nxr6VW7TAmOJgcWA99OR7kcofpw-1762002235-1.0.1.1-Mu0c1pRgfUE2DUm4BpcrHnUZqLTj0q1OnebIKI4Cyzi1N7oq3xuueGyrq_18CPRNtQJdISvBq8yCqwNgtuhanzQYOAWoKn.prlg7FmoefFQ; path=/; expires=Sat, 01-Nov-25 13:33:55 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=5a5ccXnyVmFUFwtvp7rERjQ9zRsQMWU0KKY0lVvbJVE-1762002235894-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '997b97ac7d8bd1d2-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 22:03:55,872 - openai._base_client - DEBUG - request_id: req_5fd6085d848f4f018d8d4da3d826fbe2
2025-11-01 22:03:55,873 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 22:03:55,873 - main - INFO - 10단계: 최종 수정된 YAML 추출
2025-11-01 22:03:55,873 - main - INFO - Phase 2 완료, 최종 YAML 크기: 5238 문자
2025-11-01 22:03:55,874 - main - DEBUG - 임시 파일 삭제: data_original/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_temp_phase1.yml
2025-11-01 22:03:55,874 - main - INFO - 11단계: 최종 결과 검증 및 저장
2025-11-01 22:03:55,885 - httpcore.connection - DEBUG - close.started
2025-11-01 22:03:55,887 - httpcore.connection - DEBUG - close.complete
2025-11-01 22:03:55,887 - httpcore.connection - DEBUG - close.started
2025-11-01 22:03:55,887 - httpcore.connection - DEBUG - close.complete
2025-11-01 22:03:55,887 - httpcore.connection - DEBUG - close.started
2025-11-01 22:03:55,888 - httpcore.connection - DEBUG - close.complete
2025-11-01 22:03:55,899 - utils.yaml_parser - DEBUG - 파싱된 YAML 객체: {'name': 'Build Containers', 'on': {'workflow_call': {'inputs': {'tag': {'required': True, 'type': 'string'}}, 'secrets': {'DOCKERHUB_USERNAME': {'required': True}, 'DOCKERHUB_TOKEN': {'required': True}}}}, 'jobs': {'build-frontend': {'runs-on': 'ubuntu-latest', 'name': 'Build Frontend', 'timeout-minutes': 30, 'permissions': {'contents': 'read', 'packages': 'write'}, 'steps': [{'name': 'Checkout', 'uses': 'actions/checkout@v3'}, {'name': 'Set up QEMU', 'id': 'qemu', 'uses': 'docker/setup-qemu-action@v2', 'with': {'image': 'tonistiigi/binfmt:latest', 'platforms': 'all'}}, {'name': 'Set up Docker Buildx', 'id': 'buildx', 'uses': 'docker/setup-buildx-action@v2', 'with': {'install': True}}, {'name': 'Login to Docker Hub', 'uses': 'docker/login-action@v2', 'with': {'username': '${{ secrets.DOCKERHUB_USERNAME }}', 'password': '${{ secrets.DOCKERHUB_TOKEN }}'}}, {'name': 'Log in to the Container registry', 'uses': 'docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1', 'with': {'registry': 'ghcr.io', 'username': '${{ github.actor }}', 'password': '${{ secrets.GITHUB_TOKEN }}'}}, {'name': 'Extract metadata (tags, labels) for Docker', 'id': 'meta', 'uses': 'docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7', 'with': {'images': 'hkotel/mealie, ghcr.io/${{ github.repository }}'}}, {'name': 'Build and push Frontend images', 'uses': 'docker/build-push-action@v4', 'with': {'file': 'docker/frontend.Dockerfile', 'context': '.', 'push': True, 'tags': 'frontend-${{ steps.meta.outputs.tags }}', 'labels': '${{ steps.meta.outputs.labels }}', 'platforms': 'linux/amd64, linux/arm64'}}]}, 'build-backend': {'runs-on': 'ubuntu-latest', 'name': 'Build Backend', 'timeout-minutes': 30, 'permissions': {'contents': 'read', 'packages': 'write'}, 'steps': [{'name': 'Checkout', 'uses': 'actions/checkout@v3'}, {'name': 'Set up QEMU', 'id': 'qemu', 'uses': 'docker/setup-qemu-action@v2', 'with': {'image': 'tonistiigi/binfmt:latest', 'platforms': 'all'}}, {'name': 'Set up Docker Buildx', 'id': 'buildx', 'uses': 'docker/setup-buildx-action@v2', 'with': {'install': True}}, {'name': 'Login to Docker Hub', 'uses': 'docker/login-action@v2', 'with': {'username': '${{ secrets.DOCKERHUB_USERNAME }}', 'password': '${{ secrets.DOCKERHUB_TOKEN }}'}}, {'name': 'Override __init__.py', 'run': 'echo "__version__ = \\"${{ inputs.tag }}\\"" > ./mealie/__init__.py\n'}, {'name': 'Log in to the Container registry', 'uses': 'docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1', 'with': {'registry': 'ghcr.io', 'username': '${{ github.actor }}', 'password': '${{ secrets.GITHUB_TOKEN }}'}}, {'name': 'Extract metadata (tags, labels) for Docker', 'id': 'meta', 'uses': 'docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7', 'with': {'images': 'hkotel/mealie, ghcr.io/${{ github.repository }}'}}, {'name': 'Build and push API images', 'uses': 'docker/build-push-action@v4', 'with': {'file': 'docker/api.Dockerfile', 'context': '.', 'push': True, 'tags': 'api-${{ steps.meta.outputs.tags }}', 'labels': '${{ steps.meta.outputs.labels }}', 'platforms': 'linux/amd64, linux/arm64'}}]}, 'build-omni': {'runs-on': 'ubuntu-latest', 'name': 'Build Omni', 'timeout-minutes': 30, 'permissions': {'contents': 'read', 'packages': 'write'}, 'steps': [{'name': 'Checkout', 'uses': 'actions/checkout@v2'}, {'name': 'Set up QEMU', 'id': 'qemu', 'uses': 'docker/setup-qemu-action@v2', 'with': {'image': 'tonistiigi/binfmt:latest', 'platforms': 'all'}}, {'name': 'Set up Docker Buildx', 'id': 'buildx', 'uses': 'docker/setup-buildx-action@v2', 'with': {'install': True}}, {'name': 'Login to Docker Hub', 'uses': 'docker/login-action@v2', 'with': {'username': '${{ secrets.DOCKERHUB_USERNAME }}', 'password': '${{ secrets.DOCKERHUB_TOKEN }}'}}, {'name': 'Override __init__.py', 'run': 'echo "__version__ = \\"${{ inputs.tag }}\\"" > ./mealie/__init__.py\n'}, {'name': 'Log in to the Container registry', 'uses': 'docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1', 'with': {'registry': 'ghcr.io', 'username': '${{ github.actor }}', 'password': '${{ secrets.GITHUB_TOKEN }}'}}, {'name': 'Extract metadata (tags, labels) for Docker', 'id': 'meta', 'uses': 'docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7', 'with': {'images': 'hkotel/mealie, ghcr.io/${{ github.repository }}'}}, {'name': 'Build and push API images', 'uses': 'docker/build-push-action@v4', 'with': {'file': 'docker/omni.Dockerfile', 'context': '.', 'push': True, 'tags': 'omni-${{ steps.meta.outputs.tags }}', 'labels': '${{ steps.meta.outputs.labels }}', 'platforms': 'linux/amd64, linux/arm64'}}]}}}
2025-11-01 22:03:55,900 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_gha_repair/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_gha_repaired.yml
2025-11-01 22:03:55,900 - main - INFO - 2단계 모드 복구 완료
2025-11-01 22:03:55,900 - main - INFO - 최종 수정된 파일: data_gha_repair/6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_gha_repaired.yml
2025-11-01 22:03:55,900 - __main__ - INFO - === 파일 2/3 GHA-Repair 복구 완료 ===
2025-11-01 22:03:55,900 - __main__ - INFO - ✅ 성공 (51.16초): 6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428 -> 6a773a0afa8ae0733cfa99439fda052b8eae0e937096a39f3c13b9a1c0804428_gha_repaired.yml
2025-11-01 22:03:55,900 - __main__ - INFO - [3/3] 처리 중: a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775
2025-11-01 22:03:55,900 - __main__ - INFO - 입력 파일 경로: data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775
2025-11-01 22:03:55,900 - __main__ - INFO - 출력 파일 경로: data_gha_repair/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_gha_repaired.yml
2025-11-01 22:03:55,900 - __main__ - INFO - === 파일 3/3 GHA-Repair 복구 시작 ===
2025-11-01 22:03:55,900 - main - INFO - === 2단계 모드 시작 ===
2025-11-01 22:03:55,900 - main - INFO - 1단계: 입력 파일 읽기
2025-11-01 22:03:55,901 - utils.yaml_parser - DEBUG - YAML 파일 읽기 완료: data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775
2025-11-01 22:03:55,901 - main - INFO - 파일 크기: 1695 문자
2025-11-01 22:03:55,901 - main - INFO - === Phase 1: 구문 오류 수정 ===
2025-11-01 22:03:55,901 - main - INFO - 2단계: actionlint 구문 검사
2025-11-01 22:03:55,901 - utils.process_runner - INFO - actionlint 바이너리 발견: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac
2025-11-01 22:03:55,901 - utils.process_runner - INFO - 명령어 실행: /Users/nam/Desktop/repository/Catching-Smells/smell_linter/actionlint_mac -format '{{json .}}' data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775
2025-11-01 22:03:55,924 - utils.process_runner - WARNING - 명령어 실행 실패 (코드: 1, 시간: 0.02초)
2025-11-01 22:03:55,924 - utils.process_runner - INFO - actionlint 실행 완료: 오류 발견됨 (코드: 1)
2025-11-01 22:03:55,924 - main - INFO - actionlint에서 2개 오류 발견 (syntax-check 및 expression만)
2025-11-01 22:03:55,924 - main - INFO - actionlint 오류 2개 발견
2025-11-01 22:03:55,924 - main - INFO -   오류 1: expected "inputs" key for "workflow_dispatch" section but got "customSnap"
2025-11-01 22:03:55,924 - main - INFO -   오류 2: property "customsnap" is not defined in object type {}
2025-11-01 22:03:55,924 - main - INFO - 3단계: 구문 오류 수정 프롬프트 생성
2025-11-01 22:03:55,924 - main - INFO - 4단계: 구문 오류 수정 LLM 호출
2025-11-01 22:03:55,931 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 22:03:55,932 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-5fd234cf-d9a5-440d-b2d6-2226d204d79b', 'json_data': {'messages': [{'role': 'user', 'content': '### 역할 ###\n너는 GitHub Actions YAML 파일의 구문 오류만을 전문적으로 수정하는 \'정밀한 린터(Linter) 로봇\'이다. 너의 유일한 임무는 주어진 오류 목록을 해결하는 것이다.\n\n엄격한 지시사항 (가장 중요)\n목표: 위에 나열된 \'탐지된 구문 오류\' 목록만을 수정하라.\n\n엄격한 금지사항 (Guardrail):\n- 오류 목록에서 언급되지 않은 그 어떤 코드도 절대 수정하거나 변경하지 마라.\n- 워크플로우의 로직, 스텝 순서, if 조건, run 스크립트 내용 등 의미론적인(semantic) 부분은 절대 건드리지 마라.\n- 새로운 스텝이나 잡(job)을 추가하거나 삭제하지 마라.\n- 주석이나 기존 포맷팅은 최대한 원본을 유지하라.\n\n**원본 YAML:**\n```yaml\nname: Build a Branch Specific Snapshot\n\non:\n  workflow_dispatch:\n    inputs:\n    customSnap:\n      description: \'Custom Snapshot Name\'\n      required: false\n      type: string\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      BUILD_EVENT: ${{ github.event_name }}\n      BRANCH_REF_NAME: ${{ github.ref_name }}\n      CUSTOM_SNAPSHOT_NAME: ${{ inputs.customSnap }}\n      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n      OSSRH_PASSWORD: ${{ secrets.OSSRH_TOKEN }}\n      SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}\n      SIGNING_KEY: ${{ secrets.SIGNING_KEY }}\n      SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}\n      COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}\n      GODEBUG: x509sha1=1\n    steps:\n      - name: Setup JDK\n        uses: actions/setup-java@v4\n        with:\n          java-version: \'8\'\n          distribution: \'adopt\'\n      - name: Setup GO\n        uses: actions/setup-go@v4\n        with:\n          go-version: \'1.21.4\'\n      - name: Install Nats Server\n        run: |\n          cd $GITHUB_WORKSPACE\n          git clone https://github.com/nats-io/nats-server.git\n          cd nats-server\n          go get\n          go build main.go\n          mkdir -p ~/.local/bin\n          cp main ~/.local/bin/nats-server\n          cd ..\n          rm -rf nats-server\n          nats-server -v\n      - name: Check out code\n        uses: actions/checkout@v4\n      - name: Build and Test\n        run: chmod +x gradlew && ./gradlew clean test jacocoTestReport coveralls\n      - name: Verify Javadoc\n        if: ${{ success() }}\n        run: ./gradlew javadoc\n      - name: Publish Branch Snapshot\n        if: ${{ success() }}\n        run: ./gradlew -i publishToSonatype\n\n\n\n```\n\n**탐지된 구문 오류:**\n1. expected "inputs" key for "workflow_dispatch" section but got "customSnap"\n   Line 6: 5\n2. property "customsnap" is not defined in object type {}\n   Line 17: 33\n\n**수정된 YAML:**\n```yaml'}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 22:03:55,932 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 22:03:55,932 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 22:03:55,938 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c8f1350>
2025-11-01 22:03:55,938 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10797ed50> server_hostname='api.openai.com' timeout=60
2025-11-01 22:03:55,946 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c8f1550>
2025-11-01 22:03:55,946 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 22:03:55,946 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 22:03:55,946 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 22:03:55,946 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 22:03:55,947 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 22:04:08,481 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 13:04:08 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'12317'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'12351'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'198695'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'391ms'), (b'x-request-id', b'req_dd82d8fbd3a04d88b99bb968567633b8'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=KqH.RRqn6elBRwVQ_74iY1pvM5IcbOzIZ9jMrkOKh80-1762002248-1.0.1.1-jqjYx6uOMLC7WNbOVE9kC1HefYMUoQ8KooDDI.M_.5c518rbrDF4A4aX2tNNSYaPaPS.yWo9cDQXsVqtv4NmYolE3GwllQyYFEEl_5YDYvg; path=/; expires=Sat, 01-Nov-25 13:34:08 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=758W9ixIZIXdxxsQBKXwzB5CkrbOlNrHkXGWQj18Twg-1762002248509-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'997b9856d953ea9b-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 22:04:08,483 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 22:04:08,483 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 22:04:08,486 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 22:04:08,486 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 22:04:08,486 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 22:04:08,486 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 13:04:08 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '12317'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '12351'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '198695'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '391ms'), ('x-request-id', 'req_dd82d8fbd3a04d88b99bb968567633b8'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=KqH.RRqn6elBRwVQ_74iY1pvM5IcbOzIZ9jMrkOKh80-1762002248-1.0.1.1-jqjYx6uOMLC7WNbOVE9kC1HefYMUoQ8KooDDI.M_.5c518rbrDF4A4aX2tNNSYaPaPS.yWo9cDQXsVqtv4NmYolE3GwllQyYFEEl_5YDYvg; path=/; expires=Sat, 01-Nov-25 13:34:08 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=758W9ixIZIXdxxsQBKXwzB5CkrbOlNrHkXGWQj18Twg-1762002248509-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '997b9856d953ea9b-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 22:04:08,486 - openai._base_client - DEBUG - request_id: req_dd82d8fbd3a04d88b99bb968567633b8
2025-11-01 22:04:08,487 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 22:04:08,487 - main - INFO - 5단계: 구문 수정된 YAML 추출
2025-11-01 22:04:08,487 - main - INFO - Phase 1 완료, 수정된 YAML 크기: 1700 문자
2025-11-01 22:04:08,488 - main - INFO - === Phase 2: 스멜 수정 ===
2025-11-01 22:04:08,488 - main - INFO - 6단계: 임시 파일 생성 및 스멜 검사
2025-11-01 22:04:08,489 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_temp_phase1.yml
2025-11-01 22:04:08,489 - main - INFO - 7단계: smell detection 실행
2025-11-01 22:04:08,489 - utils.process_runner - INFO - 명령어 실행: cd /Users/nam/Desktop/repository/Catching-Smells/RQ3/gha-ci-detector_paper/src && /Users/nam/Desktop/repository/Catching-Smells/.venv/bin/python -m gha_ci_detector file /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_temp_phase1.yml
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 명령어 실행 성공 (0.47초)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - Smell detector stdout: Welcome to GHA CI Detector
Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_temp_phase1.yml
We have found 12 smells
	- 3. Use fixed version for runs-on argument (line 12)
	- 6. Define permissions for workflows with external actions (job at line: 12)
	- 8. Use commit hash instead of tags for action versions (line 26)
	- 8. Use commit hash instead of tags for action versions (line 31)
	- 8. Use commit hash instead of tags for action versions (line 47)
	- 9. Steps should only perform a single command (line -1)
	- 10. Avoid jobs without timeouts (line: 12)
	- 12. Avoid workflows without comments
	- 14. Avoid incorrectly formatted workflows
	- 19. Run tests on multiple OS's (job: build)
	- 20. Run CI on multiple language versions (job: build)
	- 22. Avoid deploying jobs on forks
The following styling errors were found: 
56:44: no new line character at the end of file (new-line-at-end-of-file)

2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - Smell detector stderr: 
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - Smell detector return code: 0
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - Smell detector 출력 라인 수: 17
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 0: Welcome to GHA CI Detector
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Welcome to GHA CI Detector
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 1: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_temp_phase1.yml
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: Detecting smells for /Users/nam/Desktop/repository/Catching-Smells/GHA-Autorepair/gha_repair_tool/data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_temp_phase1.yml
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 2: We have found 12 smells
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: We have found 12 smells
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 3: - 3. Use fixed version for runs-on argument (line 12)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#3): Use fixed version for runs-on argument (line 12)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 4: - 6. Define permissions for workflows with external actions (job at line: 12)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#6): Define permissions for workflows with external actions (job at line: 12)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 5: - 8. Use commit hash instead of tags for action versions (line 26)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 26)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 6: - 8. Use commit hash instead of tags for action versions (line 31)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 31)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 7: - 8. Use commit hash instead of tags for action versions (line 47)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#8): Use commit hash instead of tags for action versions (line 47)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 8: - 9. Steps should only perform a single command (line -1)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#9): Steps should only perform a single command (line -1)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 9: - 10. Avoid jobs without timeouts (line: 12)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 대상 스멜 감지 (#10): Avoid jobs without timeouts (line: 12)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 10: - 12. Avoid workflows without comments
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#12): Avoid workflows without comments
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 11: - 14. Avoid incorrectly formatted workflows
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#14): Avoid incorrectly formatted workflows
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 12: - 19. Run tests on multiple OS's (job: build)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#19): Run tests on multiple OS's (job: build)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 13: - 20. Run CI on multiple language versions (job: build)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#20): Run CI on multiple language versions (job: build)
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 14: - 22. Avoid deploying jobs on forks
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 대상 외 스멜 건너뛰기 (#22): Avoid deploying jobs on forks
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 15: The following styling errors were found:
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 메타데이터 라인 건너뛰기: The following styling errors were found:
2025-11-01 22:04:08,962 - utils.process_runner - DEBUG - 라인 16: 56:44: no new line character at the end of file (new-line-at-end-of-file)
2025-11-01 22:04:08,962 - utils.process_runner - INFO - 총 1개 대상 스멜 파싱됨 (1,4,5,10,11,15,16번만)
2025-11-01 22:04:08,963 - utils.process_runner - INFO - Smell detector 실행 완료: 1개 스멜 발견
2025-11-01 22:04:08,963 - main - INFO - 스멜 1개 발견
2025-11-01 22:04:08,963 - main - INFO -   스멜 1: Avoid jobs without timeouts (line: 12)
2025-11-01 22:04:08,963 - main - INFO - 8단계: 스멜 수정 프롬프트 생성
2025-11-01 22:04:08,963 - main - INFO - 9단계: 스멜 수정 LLM 호출
2025-11-01 22:04:08,970 - utils.llm_api - INFO - LLM API 호출 시작 (모델: gpt-4o-mini)
2025-11-01 22:04:08,970 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'timeout': 60, 'files': None, 'idempotency_key': 'stainless-python-retry-8c9e1c97-1a4c-4a93-8e57-4e60fa765534', 'json_data': {'messages': [{'role': 'user', 'content': "### 역할 ###\n너는 GitHub Actions 워크플로우의 '특정 코드 스멜(Smell) 목록'만을 모범 사례에 따라 수정하는 '전문 DevOps 엔지니어'이다.\n\n엄격한 지시사항 (가장 중요)\n목표: 위에 나열된 '탐지된 의미론적 스멜 목록'만을 GitHub 모범 사례에 따라 수정하라.\n\n엄격한 금지사항 (Guardrail):\n- 목록에 없는 스멜이나 다른 코드 품질 문제는 절대 수정하지 마라. (예: 효율성을 임의로 개선하려 하지 마라)\n- 스멜 수정과 직접적으로 관련 없는 코드는 절대 변경하지 마라. (예: timeout 스멜을 고치기 위해 permissions 키를 수정하지 마라)\n- 기존 워크플로우의 핵심 기능, 동작 순서, if 조건 등 구조적/논리적 흐름을 변경하지 않는 선에서 스멜을 수정하라\n\n**현재 YAML (구문 오류는 이미 수정됨):**\n```yaml\nname: Build a Branch Specific Snapshot\n\non:\n  workflow_dispatch:\n    inputs:\n      customSnap:\n        description: 'Custom Snapshot Name'\n        required: false\n        type: string\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      BUILD_EVENT: ${{ github.event_name }}\n      BRANCH_REF_NAME: ${{ github.ref_name }}\n      CUSTOM_SNAPSHOT_NAME: ${{ inputs.customSnap }}\n      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n      OSSRH_PASSWORD: ${{ secrets.OSSRH_TOKEN }}\n      SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}\n      SIGNING_KEY: ${{ secrets.SIGNING_KEY }}\n      SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}\n      COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}\n      GODEBUG: x509sha1=1\n    steps:\n      - name: Setup JDK\n        uses: actions/setup-java@v4\n        with:\n          java-version: '8'\n          distribution: 'adopt'\n      - name: Setup GO\n        uses: actions/setup-go@v4\n        with:\n          go-version: '1.21.4'\n      - name: Install Nats Server\n        run: |\n          cd $GITHUB_WORKSPACE\n          git clone https://github.com/nats-io/nats-server.git\n          cd nats-server\n          go get\n          go build main.go\n          mkdir -p ~/.local/bin\n          cp main ~/.local/bin/nats-server\n          cd ..\n          rm -rf nats-server\n          nats-server -v\n      - name: Check out code\n        uses: actions/checkout@v4\n      - name: Build and Test\n        run: chmod +x gradlew && ./gradlew clean test jacocoTestReport coveralls\n      - name: Verify Javadoc\n        if: ${{ success() }}\n        run: ./gradlew javadoc\n      - name: Publish Branch Snapshot\n        if: ${{ success() }}\n        run: ./gradlew -i publishToSonatype\n```\n\n**탐지된 의미론적 스멜:**\n1. **code_smell**: Avoid jobs without timeouts (line: 12)\n\n**개선된 YAML:**\n```yaml"}], 'model': 'gpt-4o-mini', 'max_tokens': 4000, 'temperature': 0.1}}
2025-11-01 22:04:08,971 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-11-01 22:04:08,971 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=60 socket_options=None
2025-11-01 22:04:08,980 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c83e990>
2025-11-01 22:04:08,980 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1079a60d0> server_hostname='api.openai.com' timeout=60
2025-11-01 22:04:08,988 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10c83e4e0>
2025-11-01 22:04:08,988 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-11-01 22:04:08,988 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-11-01 22:04:08,988 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-11-01 22:04:08,989 - httpcore.http11 - DEBUG - send_request_body.complete
2025-11-01 22:04:08,989 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-11-01 22:04:20,113 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sat, 01 Nov 2025 13:04:20 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vyhnsq8e1qgrxbfbbkfufii7'), (b'openai-processing-ms', b'10898'), (b'openai-project', b'proj_ECazg92OTAh2UNT7fm96ON8t'), (b'openai-version', b'2020-10-01'), (b'x-envoy-upstream-service-time', b'10933'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'200000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'199317'), (b'x-ratelimit-reset-requests', b'8.64s'), (b'x-ratelimit-reset-tokens', b'204ms'), (b'x-request-id', b'req_84de67b27af34c4286f6782f65c2f8c4'), (b'x-openai-proxy-wasm', b'v0.1'), (b'cf-cache-status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=AcAB15mH_jnEV1RYqRT1Ag.0Tmwm_sw66OEdv5wemEw-1762002260-1.0.1.1-oW78gM8IAhrbzZMxLF6hzx6n9lqFS5VL_3hUkfoq9tdTd20a.sYvhsUGucAueEr24RmLcEU5hHSOlEs4qf_5AH9YHJNlAEaAUZSMOuX.1YE; path=/; expires=Sat, 01-Nov-25 13:34:20 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Strict-Transport-Security', b'max-age=31536000; includeSubDomains; preload'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=3uci13.3uzSYPJZT9zTRDUmwqvEifOMLCtTiE1_JbWY-1762002260136-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'997b98a85934e9ff-ICN'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2025-11-01 22:04:20,116 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-11-01 22:04:20,116 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-11-01 22:04:20,119 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-11-01 22:04:20,119 - httpcore.http11 - DEBUG - response_closed.started
2025-11-01 22:04:20,119 - httpcore.http11 - DEBUG - response_closed.complete
2025-11-01 22:04:20,119 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Sat, 01 Nov 2025 13:04:20 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vyhnsq8e1qgrxbfbbkfufii7'), ('openai-processing-ms', '10898'), ('openai-project', 'proj_ECazg92OTAh2UNT7fm96ON8t'), ('openai-version', '2020-10-01'), ('x-envoy-upstream-service-time', '10933'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '200000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '199317'), ('x-ratelimit-reset-requests', '8.64s'), ('x-ratelimit-reset-tokens', '204ms'), ('x-request-id', 'req_84de67b27af34c4286f6782f65c2f8c4'), ('x-openai-proxy-wasm', 'v0.1'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=AcAB15mH_jnEV1RYqRT1Ag.0Tmwm_sw66OEdv5wemEw-1762002260-1.0.1.1-oW78gM8IAhrbzZMxLF6hzx6n9lqFS5VL_3hUkfoq9tdTd20a.sYvhsUGucAueEr24RmLcEU5hHSOlEs4qf_5AH9YHJNlAEaAUZSMOuX.1YE; path=/; expires=Sat, 01-Nov-25 13:34:20 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=3uci13.3uzSYPJZT9zTRDUmwqvEifOMLCtTiE1_JbWY-1762002260136-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '997b98a85934e9ff-ICN'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2025-11-01 22:04:20,120 - openai._base_client - DEBUG - request_id: req_84de67b27af34c4286f6782f65c2f8c4
2025-11-01 22:04:20,121 - utils.llm_api - INFO - LLM API 호출 성공
2025-11-01 22:04:20,121 - main - INFO - 10단계: 최종 수정된 YAML 추출
2025-11-01 22:04:20,122 - main - INFO - Phase 2 완료, 최종 YAML 크기: 1772 문자
2025-11-01 22:04:20,122 - main - DEBUG - 임시 파일 삭제: data_original/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_temp_phase1.yml
2025-11-01 22:04:20,122 - main - INFO - 11단계: 최종 결과 검증 및 저장
2025-11-01 22:04:20,133 - utils.yaml_parser - DEBUG - 파싱된 YAML 객체: {'name': 'Build a Branch Specific Snapshot', 'on': {'workflow_dispatch': {'inputs': {'customSnap': {'description': 'Custom Snapshot Name', 'required': False, 'type': 'string'}}}}, 'jobs': {'build': {'runs-on': 'ubuntu-latest', 'timeout-minutes': 60, 'env': {'BUILD_EVENT': '${{ github.event_name }}', 'BRANCH_REF_NAME': '${{ github.ref_name }}', 'CUSTOM_SNAPSHOT_NAME': '${{ inputs.customSnap }}', 'OSSRH_USERNAME': '${{ secrets.OSSRH_USERNAME }}', 'OSSRH_PASSWORD': '${{ secrets.OSSRH_TOKEN }}', 'SIGNING_KEY_ID': '${{ secrets.SIGNING_KEY_ID }}', 'SIGNING_KEY': '${{ secrets.SIGNING_KEY }}', 'SIGNING_PASSWORD': '${{ secrets.SIGNING_PASSWORD }}', 'COVERALLS_REPO_TOKEN': '${{ secrets.COVERALLS_REPO_TOKEN }}', 'GODEBUG': 'x509sha1=1'}, 'steps': [{'name': 'Setup JDK', 'uses': 'actions/setup-java@v4', 'with': {'java-version': '8', 'distribution': 'adopt'}}, {'name': 'Setup GO', 'uses': 'actions/setup-go@v4', 'with': {'go-version': '1.21.4'}}, {'name': 'Install Nats Server', 'run': 'cd $GITHUB_WORKSPACE\ngit clone https://github.com/nats-io/nats-server.git\ncd nats-server\ngo get\ngo build main.go\nmkdir -p ~/.local/bin\ncp main ~/.local/bin/nats-server\ncd ..\nrm -rf nats-server\nnats-server -v\n'}, {'name': 'Check out code', 'uses': 'actions/checkout@v4'}, {'name': 'Build and Test', 'run': 'chmod +x gradlew && ./gradlew clean test jacocoTestReport coveralls'}, {'name': 'Verify Javadoc', 'if': '${{ success() }}', 'run': './gradlew javadoc'}, {'name': 'Publish Branch Snapshot', 'if': '${{ success() }}', 'run': './gradlew -i publishToSonatype'}]}}}
2025-11-01 22:04:20,133 - utils.yaml_parser - DEBUG - YAML 파일 저장 완료: data_gha_repair/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_gha_repaired.yml
2025-11-01 22:04:20,133 - main - INFO - 2단계 모드 복구 완료
2025-11-01 22:04:20,133 - main - INFO - 최종 수정된 파일: data_gha_repair/a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_gha_repaired.yml
2025-11-01 22:04:20,134 - __main__ - INFO - === 파일 3/3 GHA-Repair 복구 완료 ===
2025-11-01 22:04:20,134 - __main__ - INFO - ✅ 성공 (24.23초): a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775 -> a0e08fda76b7107570ffe6222be262eeac8ef4f2d9023dc2caef5cba9a20a775_gha_repaired.yml
2025-11-01 22:04:20,134 - __main__ - INFO - ============================================================
2025-11-01 22:04:20,134 - __main__ - INFO - GHA-Repair 자동 복구 완료!
2025-11-01 22:04:20,134 - __main__ - INFO - 총 처리 시간: 107.4초
2025-11-01 22:04:20,134 - __main__ - INFO - 총 파일: 3
2025-11-01 22:04:20,134 - __main__ - INFO - 성공: 3 (100.0%)
2025-11-01 22:04:20,134 - __main__ - INFO - 실패: 0
2025-11-01 22:04:20,134 - __main__ - INFO - 평균 처리 시간: 35.82초/파일
2025-11-01 22:04:20,134 - __main__ - INFO - 출력 파일 위치: data_gha_repair
2025-11-01 22:04:20,134 - __main__ - INFO - INFO 로그 파일: logs/gha_repair_test_3files_info.log
2025-11-01 22:04:20,134 - __main__ - INFO - DEBUG 로그 파일: logs/gha_repair_test_3files_debug.log
2025-11-01 22:04:20,134 - __main__ - INFO - ============================================================
2025-11-01 22:04:20,181 - httpcore.connection - DEBUG - close.started
2025-11-01 22:04:20,182 - httpcore.connection - DEBUG - close.complete
2025-11-01 22:04:20,182 - httpcore.connection - DEBUG - close.started
2025-11-01 22:04:20,182 - httpcore.connection - DEBUG - close.complete
2025-11-01 22:04:20,182 - httpcore.connection - DEBUG - close.started
2025-11-01 22:04:20,182 - httpcore.connection - DEBUG - close.complete
